{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection Projectile motion provides a fundamental framework for understanding physics in two dimensions. This document derives the governing equations, analyzes the range as a function of the angle of projection, explores practical applications, and implements simulations to visualize key relationships. 1. Theoretical Foundation Derivation of Equations of Motion Consider a projectile launched with initial velocity \\(v_0\\) at angle \\(\\theta\\) from height \\(h\\) , under gravity \\(g\\) as the sole force. Using Newton\u2019s second law, \\(\\vec{F} = m \\vec{a}\\) , with \\(F_x = 0\\) and \\(F_y = -mg\\) : Horizontal: \\(\\frac{d^2x}{dt^2} = 0\\) . Vertical: \\(\\frac{d^2y}{dt^2} = -g\\) . Initial conditions are \\(x(0) = 0\\) , \\(y(0) = h\\) , \\(\\frac{dx}{dt}(0) = v_{0x} = v_0 \\cos\\theta\\) , \\(\\frac{dy}{dt}(0) = v_{0y} = v_0 \\sin\\theta\\) . Solving: \\[ x(t) = (v_0 \\cos\\theta) t, \\] \\[ y(t) = h + (v_0 \\sin\\theta) t - \\frac{1}{2} g t^2. \\] Trajectory Equation Eliminate \\(t\\) from \\(x(t)\\) : \\(t = \\frac{x}{v_0 \\cos\\theta}\\) . Substitute into \\(y(t)\\) : \\[ y = h + (v_0 \\sin\\theta) \\frac{x}{v_0 \\cos\\theta} - \\frac{1}{2} g \\left( \\frac{x}{v_0 \\cos\\theta} \\right)^2, \\] \\[ y = h + x \\tan\\theta - \\frac{g x^2}{2 v_0^2 \\cos^2\\theta}. \\] This parabolic form depends on \\(v_0\\) , \\(\\theta\\) , \\(h\\) , and \\(g\\) , defining a family of solutions. Family of Solutions For \\(h = 0\\) , the range \\(R\\) (where \\(y = 0\\) ) is: \\[ 0 = R \\tan\\theta - \\frac{g R^2}{2 v_0^2 \\cos^2\\theta}, \\] \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g}. \\] Varying \\(v_0\\) , \\(\\theta\\) , \\(h\\) , or \\(g\\) generates distinct trajectories, e.g., higher \\(v_0\\) flattens the curve, while \\(h \\neq 0\\) shifts the landing point. 2. Analysis of the Range Range Formula For \\(h = 0\\) : \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g}. \\] Key Parameters \\(v_0\\) : Range scales as \\(v_0^2\\) . \\(g\\) : Inversely proportional to \\(R\\) . \\(\\theta\\) : \\(\\sin 2\\theta\\) peaks at 1, affecting \\(R\\) symmetrically about 45\u00b0. Parameter Effects Increasing \\(v_0\\) : If \\(v_0\\) doubles, \\(R\\) quadruples (e.g., from 10 m/s to 20 m/s, \\(R\\) increases by 4\u00d7). Changing \\(g\\) : On the Moon ( \\(g = 1.62 \\, \\text{m/s}^2\\) ), \\(R\\) is \\(9.81 / 1.62 \\approx 6\\) times larger than on Earth. Varying \\(\\theta\\) : \\(R = 0\\) at \\(\\theta = 0^\\circ, 90^\\circ\\) ; peaks at \\(\\theta = 45^\\circ\\) . Optimal Angle Maximize \\(R = \\frac{v_0^2}{g} \\sin 2\\theta\\) : \\[ \\frac{dR}{d\\theta} = \\frac{v_0^2}{g} \\cdot 2 \\cos 2\\theta = 0, \\] \\[ \\theta = 45^\\circ, \\quad R_{\\text{max}} = \\frac{v_0^2}{g}. \\] 3. Practical Applications Scenarios Basketball : Shots follow \\(y = x \\tan\\theta - \\frac{g x^2}{2 v_0^2 \\cos^2\\theta}\\) . Artillery : Targets require adjusted \\(R\\) . Space Launches : Early trajectories approximate projectiles. Uneven Terrain For landing height \\(h_f\\) : \\[ h_f = h + R \\tan\\theta - \\frac{g R^2}{2 v_0^2 \\cos^2\\theta}, \\] solve the quadratic for \\(R\\) . For \\(h > h_f\\) , \\(R\\) increases. Additional Factors Air Resistance : \\(F_d = -k v^2\\) reduces \\(R\\) , solved numerically. Wind : Adds \\(w t\\) to \\(x(t)\\) , shifting \\(R\\) . Adaptations Use numerical methods (e.g., Runge-Kutta) for drag; adjust \\(x(t) = (v_0 \\cos\\theta + w) t\\) for wind. 4. Implementation Simulation Tool Below are Python scripts simulating projectile motion. Code 1: Plotting the Trajectory for a Single Set of Parameters import numpy as np import matplotlib.pyplot as plt # Parameters v0 = 20.0 # Initial velocity (m/s) theta_deg = 45 # Angle in degrees g = 9.81 # Gravitational acceleration (m/s^2) h = 0.0 # Initial height (m) # Convert angle to radians theta = np.radians(theta_deg) # Time of flight (for h = 0, adjust if h != 0) t_flight = 2 * v0 * np.sin(theta) / g t = np.linspace(0, t_flight, 100) # Position equations x = v0 * np.cos(theta) * t y = h + v0 * np.sin(theta) * t - 0.5 * g * t**2 # Plot plt.figure(figsize=(8, 6)) plt.plot(x, y, label=f'\u03b8 = {theta_deg}\u00b0', color='blue') plt.title('Projectile Trajectory') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Height (m)') plt.grid(True) plt.legend() plt.axhline(0, color='black', linewidth=0.5) plt.show() Code 2: Range vs. Angle for Different Initial Velocities import numpy as np import matplotlib.pyplot as plt # Parameters g = 9.81 # Gravitational acceleration (m/s^2) angles_deg = np.linspace(0, 90, 91) # Angles from 0\u00b0 to 90\u00b0 angles_rad = np.radians(angles_deg) v0_values = [10, 20, 30] # Different initial velocities (m/s) # Plot plt.figure(figsize=(8, 6)) for v0 in v0_values: R = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles_deg, R, label=f'v\u2080 = {v0} m/s') plt.title('Range vs. Angle of Projection') plt.xlabel('Angle \u03b8 (degrees)') plt.ylabel('Range R (m)') plt.grid(True) plt.legend() plt.show() Code 3: Range vs. Angle for Different Gravitational Accelerations import numpy as np import matplotlib.pyplot as plt # Parameters v0 = 20.0 # Initial velocity (m/s) angles_deg = np.linspace(0, 90, 91) # Angles from 0\u00b0 to 90\u00b0 angles_rad = np.radians(angles_deg) g_values = {'Earth': 9.81, 'Moon': 1.62, 'Mars': 3.72} # Gravity (m/s^2) # Plot plt.figure(figsize=(8, 6)) for planet, g in g_values.items(): R = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles_deg, R, label=f'{planet} (g = {g} m/s\u00b2)') plt.title('Range vs. Angle for Different Gravities') plt.xlabel('Angle \u03b8 (degrees)') plt.ylabel('Range R (m)') plt.grid(True) plt.legend() plt.show() Code 4: Trajectory with Non-Zero Initial Height import matplotlib.pyplot as plt import numpy as np # Constants g = 9.81 # gravity (m/s^2) v0 = 25 # initial speed (m/s) angle_deg = 45 # launch angle (degrees) angle_rad = np.radians(angle_deg) # Initial heights to test initial_heights = [0, 10, 20] # in meters labels = [f\"h0 = {h} m\" for h in initial_heights] # Time array t = np.linspace(0, 5, num=500) # simulate for 5 seconds # Plotting plt.figure(figsize=(10, 6)) for h0, label in zip(initial_heights, labels): # Equations of motion x = v0 * np.cos(angle_rad) * t y = h0 + v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 # Only keep points where y >= 0 (above ground) mask = y >= 0 plt.plot(x[mask], y[mask], label=label) plt.title(\"Projectile Motion for Different Initial Heights\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.legend() plt.grid(True) plt.show() Deliverables Equations : Derived \\(x(t)\\) , \\(y(t)\\) , and \\(R\\) . Graphs : Trajectory and \\(R\\) vs. \\(\\theta\\) plots. Limitations : Ideal model ignores drag; extend with numerical solvers. Conclusion The range \\(R = \\frac{v_0^2 \\sin 2\\theta}{g}\\) peaks at 45\u00b0, scales with \\(v_0^2\\) , and adapts to real-world factors via modifications, demonstrated through simulations. Colab Souce Code","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"Projectile motion provides a fundamental framework for understanding physics in two dimensions. This document derives the governing equations, analyzes the range as a function of the angle of projection, explores practical applications, and implements simulations to visualize key relationships.","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#derivation-of-equations-of-motion","text":"Consider a projectile launched with initial velocity \\(v_0\\) at angle \\(\\theta\\) from height \\(h\\) , under gravity \\(g\\) as the sole force. Using Newton\u2019s second law, \\(\\vec{F} = m \\vec{a}\\) , with \\(F_x = 0\\) and \\(F_y = -mg\\) : Horizontal: \\(\\frac{d^2x}{dt^2} = 0\\) . Vertical: \\(\\frac{d^2y}{dt^2} = -g\\) . Initial conditions are \\(x(0) = 0\\) , \\(y(0) = h\\) , \\(\\frac{dx}{dt}(0) = v_{0x} = v_0 \\cos\\theta\\) , \\(\\frac{dy}{dt}(0) = v_{0y} = v_0 \\sin\\theta\\) . Solving: \\[ x(t) = (v_0 \\cos\\theta) t, \\] \\[ y(t) = h + (v_0 \\sin\\theta) t - \\frac{1}{2} g t^2. \\]","title":"Derivation of Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#trajectory-equation","text":"Eliminate \\(t\\) from \\(x(t)\\) : \\(t = \\frac{x}{v_0 \\cos\\theta}\\) . Substitute into \\(y(t)\\) : \\[ y = h + (v_0 \\sin\\theta) \\frac{x}{v_0 \\cos\\theta} - \\frac{1}{2} g \\left( \\frac{x}{v_0 \\cos\\theta} \\right)^2, \\] \\[ y = h + x \\tan\\theta - \\frac{g x^2}{2 v_0^2 \\cos^2\\theta}. \\] This parabolic form depends on \\(v_0\\) , \\(\\theta\\) , \\(h\\) , and \\(g\\) , defining a family of solutions.","title":"Trajectory Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"For \\(h = 0\\) , the range \\(R\\) (where \\(y = 0\\) ) is: \\[ 0 = R \\tan\\theta - \\frac{g R^2}{2 v_0^2 \\cos^2\\theta}, \\] \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g}. \\] Varying \\(v_0\\) , \\(\\theta\\) , \\(h\\) , or \\(g\\) generates distinct trajectories, e.g., higher \\(v_0\\) flattens the curve, while \\(h \\neq 0\\) shifts the landing point.","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-formula","text":"For \\(h = 0\\) : \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g}. \\]","title":"Range Formula"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#key-parameters","text":"\\(v_0\\) : Range scales as \\(v_0^2\\) . \\(g\\) : Inversely proportional to \\(R\\) . \\(\\theta\\) : \\(\\sin 2\\theta\\) peaks at 1, affecting \\(R\\) symmetrically about 45\u00b0.","title":"Key Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#parameter-effects","text":"Increasing \\(v_0\\) : If \\(v_0\\) doubles, \\(R\\) quadruples (e.g., from 10 m/s to 20 m/s, \\(R\\) increases by 4\u00d7). Changing \\(g\\) : On the Moon ( \\(g = 1.62 \\, \\text{m/s}^2\\) ), \\(R\\) is \\(9.81 / 1.62 \\approx 6\\) times larger than on Earth. Varying \\(\\theta\\) : \\(R = 0\\) at \\(\\theta = 0^\\circ, 90^\\circ\\) ; peaks at \\(\\theta = 45^\\circ\\) .","title":"Parameter Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#optimal-angle","text":"Maximize \\(R = \\frac{v_0^2}{g} \\sin 2\\theta\\) : \\[ \\frac{dR}{d\\theta} = \\frac{v_0^2}{g} \\cdot 2 \\cos 2\\theta = 0, \\] \\[ \\theta = 45^\\circ, \\quad R_{\\text{max}} = \\frac{v_0^2}{g}. \\]","title":"Optimal Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#scenarios","text":"Basketball : Shots follow \\(y = x \\tan\\theta - \\frac{g x^2}{2 v_0^2 \\cos^2\\theta}\\) . Artillery : Targets require adjusted \\(R\\) . Space Launches : Early trajectories approximate projectiles.","title":"Scenarios"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#uneven-terrain","text":"For landing height \\(h_f\\) : \\[ h_f = h + R \\tan\\theta - \\frac{g R^2}{2 v_0^2 \\cos^2\\theta}, \\] solve the quadratic for \\(R\\) . For \\(h > h_f\\) , \\(R\\) increases.","title":"Uneven Terrain"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#additional-factors","text":"Air Resistance : \\(F_d = -k v^2\\) reduces \\(R\\) , solved numerically. Wind : Adds \\(w t\\) to \\(x(t)\\) , shifting \\(R\\) .","title":"Additional Factors"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#adaptations","text":"Use numerical methods (e.g., Runge-Kutta) for drag; adjust \\(x(t) = (v_0 \\cos\\theta + w) t\\) for wind.","title":"Adaptations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#simulation-tool","text":"Below are Python scripts simulating projectile motion.","title":"Simulation Tool"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#code-1-plotting-the-trajectory-for-a-single-set-of-parameters","text":"import numpy as np import matplotlib.pyplot as plt # Parameters v0 = 20.0 # Initial velocity (m/s) theta_deg = 45 # Angle in degrees g = 9.81 # Gravitational acceleration (m/s^2) h = 0.0 # Initial height (m) # Convert angle to radians theta = np.radians(theta_deg) # Time of flight (for h = 0, adjust if h != 0) t_flight = 2 * v0 * np.sin(theta) / g t = np.linspace(0, t_flight, 100) # Position equations x = v0 * np.cos(theta) * t y = h + v0 * np.sin(theta) * t - 0.5 * g * t**2 # Plot plt.figure(figsize=(8, 6)) plt.plot(x, y, label=f'\u03b8 = {theta_deg}\u00b0', color='blue') plt.title('Projectile Trajectory') plt.xlabel('Horizontal Distance (m)') plt.ylabel('Vertical Height (m)') plt.grid(True) plt.legend() plt.axhline(0, color='black', linewidth=0.5) plt.show()","title":"Code 1: Plotting the Trajectory for a Single Set of Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#code-2-range-vs-angle-for-different-initial-velocities","text":"import numpy as np import matplotlib.pyplot as plt # Parameters g = 9.81 # Gravitational acceleration (m/s^2) angles_deg = np.linspace(0, 90, 91) # Angles from 0\u00b0 to 90\u00b0 angles_rad = np.radians(angles_deg) v0_values = [10, 20, 30] # Different initial velocities (m/s) # Plot plt.figure(figsize=(8, 6)) for v0 in v0_values: R = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles_deg, R, label=f'v\u2080 = {v0} m/s') plt.title('Range vs. Angle of Projection') plt.xlabel('Angle \u03b8 (degrees)') plt.ylabel('Range R (m)') plt.grid(True) plt.legend() plt.show()","title":"Code 2: Range vs. Angle for Different Initial Velocities"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#code-3-range-vs-angle-for-different-gravitational-accelerations","text":"import numpy as np import matplotlib.pyplot as plt # Parameters v0 = 20.0 # Initial velocity (m/s) angles_deg = np.linspace(0, 90, 91) # Angles from 0\u00b0 to 90\u00b0 angles_rad = np.radians(angles_deg) g_values = {'Earth': 9.81, 'Moon': 1.62, 'Mars': 3.72} # Gravity (m/s^2) # Plot plt.figure(figsize=(8, 6)) for planet, g in g_values.items(): R = (v0**2 * np.sin(2 * angles_rad)) / g plt.plot(angles_deg, R, label=f'{planet} (g = {g} m/s\u00b2)') plt.title('Range vs. Angle for Different Gravities') plt.xlabel('Angle \u03b8 (degrees)') plt.ylabel('Range R (m)') plt.grid(True) plt.legend() plt.show()","title":"Code 3: Range vs. Angle for Different Gravitational Accelerations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#code-4-trajectory-with-non-zero-initial-height","text":"import matplotlib.pyplot as plt import numpy as np # Constants g = 9.81 # gravity (m/s^2) v0 = 25 # initial speed (m/s) angle_deg = 45 # launch angle (degrees) angle_rad = np.radians(angle_deg) # Initial heights to test initial_heights = [0, 10, 20] # in meters labels = [f\"h0 = {h} m\" for h in initial_heights] # Time array t = np.linspace(0, 5, num=500) # simulate for 5 seconds # Plotting plt.figure(figsize=(10, 6)) for h0, label in zip(initial_heights, labels): # Equations of motion x = v0 * np.cos(angle_rad) * t y = h0 + v0 * np.sin(angle_rad) * t - 0.5 * g * t**2 # Only keep points where y >= 0 (above ground) mask = y >= 0 plt.plot(x[mask], y[mask], label=label) plt.title(\"Projectile Motion for Different Initial Heights\") plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.legend() plt.grid(True) plt.show()","title":"Code 4: Trajectory with Non-Zero Initial Height"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deliverables","text":"Equations : Derived \\(x(t)\\) , \\(y(t)\\) , and \\(R\\) . Graphs : Trajectory and \\(R\\) vs. \\(\\theta\\) plots. Limitations : Ideal model ignores drag; extend with numerical solvers.","title":"Deliverables"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"The range \\(R = \\frac{v_0^2 \\sin 2\\theta}{g}\\) peaks at 45\u00b0, scales with \\(v_0^2\\) , and adapts to real-world factors via modifications, demonstrated through simulations.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#colab","text":"Souce Code","title":"Colab"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 1. Theoretical Foundation The forced damped pendulum is a nonlinear system governed by: $$ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) $$ For small angles, \\(\\sin\\theta \\approx \\theta\\) , yielding a linear equation: $$ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) $$ where \\(\\omega_0 = \\sqrt{g/L}\\) . Solutions include transient decay and a steady-state response: $$ \\theta_p(t) = D \\cos(\\omega t - \\phi), \\quad D = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b \\omega)^2}} $$ Resonance occurs when \\(\\omega \\approx \\omega_0\\) , maximizing amplitude. 2. System Dynamics Damping \\((b)\\) : Higher \\(b\\) reduces oscillation amplitude and shifts resonance. Driving Amplitude \\((A)\\) : Larger \\(A\\) increases response, introducing nonlinear effects. Driving Frequency \\((\\omega)\\) : Controls synchronization and energy transfer. Chaos : Increasing \\(A\\) can induce period doubling and chaotic behavior. 3. Applications Energy Harvesting : Piezoelectric devices optimize energy capture by tuning \\(\\omega_0\\) . Bridges : Wind-induced oscillations (e.g., Tacoma Narrows) align with resonance behavior. Oscillating Circuits : Analogous to RLC circuits with \\(\\omega_0\\) and damping. 4. Implementation of the Forced Damped Pendulum Simulation This section demonstrates three different pendulum scenarios: 1. Pure pendulum (no damping, no external force) 2. Damped pendulum 3. Forced pendulum without damping 4.1 Pure Pendulum (No Damping, No External Force) import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def pure_pendulum(state, t): theta, v = state dtheta_dt = v dv_dt = -np.sin(theta) # No damping (b=0) and no external force (A=0) return [dtheta_dt, dv_dt] # Parameters t = np.linspace(0, 50, 1000) # Time array initial_conditions = [0.1, 0] # [theta0, v0] # Solve sol = odeint(pure_pendulum, initial_conditions, t) theta = sol[:, 0] v = sol[:, 1] # Create subplots fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5)) # Time series plot ax1.plot(t, theta, 'b-', label='\u03b8(t)') ax1.set_xlabel('Time (s)') ax1.set_ylabel('\u03b8 (rad)') ax1.set_title('Pure Pendulum: \u03b8 vs Time') ax1.grid(True) ax1.legend() # Phase space plot ax2.plot(theta, v, 'r-', lw=0.5) ax2.set_xlabel('\u03b8 (rad)') ax2.set_ylabel('\u03b8\u0307 (rad/s)') ax2.set_title('Pure Pendulum: Phase Space') ax2.grid(True) plt.tight_layout() plt.show() Output : Two plots showing the pure pendulum motion: 1. Left: Time series of angular displacement \u03b8(t) 2. Right: Phase space trajectory showing the conservation of energy (closed orbit) 4.2 Damped Pendulum import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def damped_pendulum(state, t, b): theta, v = state dtheta_dt = v dv_dt = -b * v - np.sin(theta) # With damping (b\u22600) but no external force (A=0) return [dtheta_dt, dv_dt] # Parameters t = np.linspace(0, 50, 1000) b = 0.5 # Damping coefficient initial_conditions = [0.1, 0] # Solve sol = odeint(damped_pendulum, initial_conditions, t, args=(b,)) theta = sol[:, 0] v = sol[:, 1] # Create subplots fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5)) # Time series plot ax1.plot(t, theta, 'b-', label='\u03b8(t)') ax1.set_xlabel('Time (s)') ax1.set_ylabel('\u03b8 (rad)') ax1.set_title('Damped Pendulum: \u03b8 vs Time') ax1.grid(True) ax1.legend() # Phase space plot ax2.plot(theta, v, 'r-', lw=0.5) ax2.set_xlabel('\u03b8 (rad)') ax2.set_ylabel('\u03b8\u0307 (rad/s)') ax2.set_title('Damped Pendulum: Phase Space') ax2.grid(True) plt.tight_layout() plt.show() Output : Two plots showing the damped pendulum motion: 1. Left: Time series showing the decaying oscillations 2. Right: Phase space trajectory showing the energy dissipation (spiral trajectory) 4.3 Forced Pendulum without Damping import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def forced_pendulum(state, t, A, omega): theta, v = state dtheta_dt = v dv_dt = -np.sin(theta) + A * np.cos(omega * t) # No damping (b=0) but with external force (A\u22600) return [dtheta_dt, dv_dt] # Parameters t = np.linspace(0, 50, 1000) A = 0.5 # External force amplitude omega = 2/3 # Driving frequency initial_conditions = [0.1, 0] # Solve sol = odeint(forced_pendulum, initial_conditions, t, args=(A, omega)) theta = sol[:, 0] v = sol[:, 1] # Create subplots fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5)) # Time series plot ax1.plot(t, theta, 'b-', label='\u03b8(t)') ax1.set_xlabel('Time (s)') ax1.set_ylabel('\u03b8 (rad)') ax1.set_title('Forced Pendulum: \u03b8 vs Time') ax1.grid(True) ax1.legend() # Phase space plot ax2.plot(theta, v, 'r-', lw=0.5) ax2.set_xlabel('\u03b8 (rad)') ax2.set_ylabel('\u03b8\u0307 (rad/s)') ax2.set_title('Forced Pendulum: Phase Space') ax2.grid(True) plt.tight_layout() plt.show() Output : Two plots showing the forced pendulum motion: 1. Left: Time series showing the driven oscillations 2. Right: Phase space trajectory showing the complex dynamics due to the external force 5. Colab Souce Code 6. Forced Damped Pendulum: Chaos & Resonance 6.1 Chaotic Motion in the Forced Damped Pendulum For certain values of the damping coefficient $ b $, driving amplitude $ A $, and driving frequency $ \\omega $, the forced damped pendulum exhibits chaotic behavior. A common set of parameters leading to chaos is: - $ b = 0.5 $ (moderate damping) - $ A = 1.2 $ (strong forcing) - $ \\omega = \\frac{2}{3} $ (driving frequency) Let's simulate the chaotic motion: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def chaotic_pendulum(state, t, b, A, omega): theta, v = state dtheta_dt = v dv_dt = -b * v - np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, dv_dt] # Parameters t = np.linspace(0, 100, 5000) # Extended time for chaotic behavior b = 0.5 A = 1.2 omega = 2/3 initial_conditions = [0.1, 0] # Solve sol = odeint(chaotic_pendulum, initial_conditions, t, args=(b, A, omega)) theta = sol[:, 0] v = sol[:, 1] # Create subplots fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5)) # Time series plot ax1.plot(t, theta, 'b-', label='\u03b8(t)') ax1.set_xlabel('Time (s)') ax1.set_ylabel('\u03b8 (rad)') ax1.set_title('Chaotic Pendulum: \u03b8 vs Time') ax1.grid(True) ax1.legend() # Phase space plot ax2.plot(theta, v, 'r-', lw=0.5) ax2.set_xlabel('\u03b8 (rad)') ax2.set_ylabel('\u03b8\u0307 (rad/s)') ax2.set_title('Chaotic Pendulum: Phase Space') ax2.grid(True) plt.tight_layout() plt.show() Expected Output: Time Series Plot : Irregular oscillations with no periodic pattern. Phase Space Plot : A strange attractor instead of a closed orbit, characteristic of chaotic dynamics. 6.2 Resonance in the Forced Damped Pendulum Resonance occurs when the driving frequency $ \\omega $ is close to the system\u2019s natural frequency $ \\omega_0 = \\sqrt{g/L} $. This results in large oscillations. Let\u2019s simulate resonance by setting: - $ b = 0.1 $ (low damping) - $ A = 0.5 $ (moderate forcing) - $ \\omega = \\omega_0 \\approx 1 $ (resonance condition) # Define the system def resonance_pendulum(state, t, b, A, omega): theta, v = state dtheta_dt = v dv_dt = -b * v - np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, dv_dt] # Parameters t = np.linspace(0, 100, 5000) # Long simulation to see resonance effects b = 0.1 A = 0.5 omega = 1 # Resonance condition initial_conditions = [0.1, 0] # Solve sol = odeint(resonance_pendulum, initial_conditions, t, args=(b, A, omega)) theta = sol[:, 0] v = sol[:, 1] # Create subplots fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5)) # Time series plot ax1.plot(t, theta, 'b-', label='\u03b8(t)') ax1.set_xlabel('Time (s)') ax1.set_ylabel('\u03b8 (rad)') ax1.set_title('Resonance: \u03b8 vs Time') ax1.grid(True) ax1.legend() # Phase space plot ax2.plot(theta, v, 'r-', lw=0.5) ax2.set_xlabel('\u03b8 (rad)') ax2.set_ylabel('\u03b8\u0307 (rad/s)') ax2.set_title('Resonance: Phase Space') ax2.grid(True) plt.tight_layout() plt.show() Expected Output: Time Series Plot : Oscillations with increasing amplitude over time. Phase Space Plot : Large periodic orbits, showing energy accumulation due to resonance.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The forced damped pendulum is a nonlinear system governed by: $$ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\frac{g}{L} \\sin\\theta = A \\cos(\\omega t) $$ For small angles, \\(\\sin\\theta \\approx \\theta\\) , yielding a linear equation: $$ \\frac{d^2\\theta}{dt^2} + b \\frac{d\\theta}{dt} + \\omega_0^2 \\theta = A \\cos(\\omega t) $$ where \\(\\omega_0 = \\sqrt{g/L}\\) . Solutions include transient decay and a steady-state response: $$ \\theta_p(t) = D \\cos(\\omega t - \\phi), \\quad D = \\frac{A}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (b \\omega)^2}} $$ Resonance occurs when \\(\\omega \\approx \\omega_0\\) , maximizing amplitude.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-system-dynamics","text":"Damping \\((b)\\) : Higher \\(b\\) reduces oscillation amplitude and shifts resonance. Driving Amplitude \\((A)\\) : Larger \\(A\\) increases response, introducing nonlinear effects. Driving Frequency \\((\\omega)\\) : Controls synchronization and energy transfer. Chaos : Increasing \\(A\\) can induce period doubling and chaotic behavior.","title":"2. System Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-applications","text":"Energy Harvesting : Piezoelectric devices optimize energy capture by tuning \\(\\omega_0\\) . Bridges : Wind-induced oscillations (e.g., Tacoma Narrows) align with resonance behavior. Oscillating Circuits : Analogous to RLC circuits with \\(\\omega_0\\) and damping.","title":"3. Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation-of-the-forced-damped-pendulum-simulation","text":"This section demonstrates three different pendulum scenarios: 1. Pure pendulum (no damping, no external force) 2. Damped pendulum 3. Forced pendulum without damping","title":"4. Implementation of the Forced Damped Pendulum Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#41-pure-pendulum-no-damping-no-external-force","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def pure_pendulum(state, t): theta, v = state dtheta_dt = v dv_dt = -np.sin(theta) # No damping (b=0) and no external force (A=0) return [dtheta_dt, dv_dt] # Parameters t = np.linspace(0, 50, 1000) # Time array initial_conditions = [0.1, 0] # [theta0, v0] # Solve sol = odeint(pure_pendulum, initial_conditions, t) theta = sol[:, 0] v = sol[:, 1] # Create subplots fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5)) # Time series plot ax1.plot(t, theta, 'b-', label='\u03b8(t)') ax1.set_xlabel('Time (s)') ax1.set_ylabel('\u03b8 (rad)') ax1.set_title('Pure Pendulum: \u03b8 vs Time') ax1.grid(True) ax1.legend() # Phase space plot ax2.plot(theta, v, 'r-', lw=0.5) ax2.set_xlabel('\u03b8 (rad)') ax2.set_ylabel('\u03b8\u0307 (rad/s)') ax2.set_title('Pure Pendulum: Phase Space') ax2.grid(True) plt.tight_layout() plt.show() Output : Two plots showing the pure pendulum motion: 1. Left: Time series of angular displacement \u03b8(t) 2. Right: Phase space trajectory showing the conservation of energy (closed orbit)","title":"4.1 Pure Pendulum (No Damping, No External Force)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#42-damped-pendulum","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def damped_pendulum(state, t, b): theta, v = state dtheta_dt = v dv_dt = -b * v - np.sin(theta) # With damping (b\u22600) but no external force (A=0) return [dtheta_dt, dv_dt] # Parameters t = np.linspace(0, 50, 1000) b = 0.5 # Damping coefficient initial_conditions = [0.1, 0] # Solve sol = odeint(damped_pendulum, initial_conditions, t, args=(b,)) theta = sol[:, 0] v = sol[:, 1] # Create subplots fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5)) # Time series plot ax1.plot(t, theta, 'b-', label='\u03b8(t)') ax1.set_xlabel('Time (s)') ax1.set_ylabel('\u03b8 (rad)') ax1.set_title('Damped Pendulum: \u03b8 vs Time') ax1.grid(True) ax1.legend() # Phase space plot ax2.plot(theta, v, 'r-', lw=0.5) ax2.set_xlabel('\u03b8 (rad)') ax2.set_ylabel('\u03b8\u0307 (rad/s)') ax2.set_title('Damped Pendulum: Phase Space') ax2.grid(True) plt.tight_layout() plt.show() Output : Two plots showing the damped pendulum motion: 1. Left: Time series showing the decaying oscillations 2. Right: Phase space trajectory showing the energy dissipation (spiral trajectory)","title":"4.2 Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#43-forced-pendulum-without-damping","text":"import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def forced_pendulum(state, t, A, omega): theta, v = state dtheta_dt = v dv_dt = -np.sin(theta) + A * np.cos(omega * t) # No damping (b=0) but with external force (A\u22600) return [dtheta_dt, dv_dt] # Parameters t = np.linspace(0, 50, 1000) A = 0.5 # External force amplitude omega = 2/3 # Driving frequency initial_conditions = [0.1, 0] # Solve sol = odeint(forced_pendulum, initial_conditions, t, args=(A, omega)) theta = sol[:, 0] v = sol[:, 1] # Create subplots fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5)) # Time series plot ax1.plot(t, theta, 'b-', label='\u03b8(t)') ax1.set_xlabel('Time (s)') ax1.set_ylabel('\u03b8 (rad)') ax1.set_title('Forced Pendulum: \u03b8 vs Time') ax1.grid(True) ax1.legend() # Phase space plot ax2.plot(theta, v, 'r-', lw=0.5) ax2.set_xlabel('\u03b8 (rad)') ax2.set_ylabel('\u03b8\u0307 (rad/s)') ax2.set_title('Forced Pendulum: Phase Space') ax2.grid(True) plt.tight_layout() plt.show() Output : Two plots showing the forced pendulum motion: 1. Left: Time series showing the driven oscillations 2. Right: Phase space trajectory showing the complex dynamics due to the external force","title":"4.3 Forced Pendulum without Damping"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#5-colab","text":"Souce Code","title":"5. Colab"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#6-forced-damped-pendulum-chaos-resonance","text":"","title":"6. Forced Damped Pendulum: Chaos &amp; Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#61-chaotic-motion-in-the-forced-damped-pendulum","text":"For certain values of the damping coefficient $ b $, driving amplitude $ A $, and driving frequency $ \\omega $, the forced damped pendulum exhibits chaotic behavior. A common set of parameters leading to chaos is: - $ b = 0.5 $ (moderate damping) - $ A = 1.2 $ (strong forcing) - $ \\omega = \\frac{2}{3} $ (driving frequency) Let's simulate the chaotic motion: import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def chaotic_pendulum(state, t, b, A, omega): theta, v = state dtheta_dt = v dv_dt = -b * v - np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, dv_dt] # Parameters t = np.linspace(0, 100, 5000) # Extended time for chaotic behavior b = 0.5 A = 1.2 omega = 2/3 initial_conditions = [0.1, 0] # Solve sol = odeint(chaotic_pendulum, initial_conditions, t, args=(b, A, omega)) theta = sol[:, 0] v = sol[:, 1] # Create subplots fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5)) # Time series plot ax1.plot(t, theta, 'b-', label='\u03b8(t)') ax1.set_xlabel('Time (s)') ax1.set_ylabel('\u03b8 (rad)') ax1.set_title('Chaotic Pendulum: \u03b8 vs Time') ax1.grid(True) ax1.legend() # Phase space plot ax2.plot(theta, v, 'r-', lw=0.5) ax2.set_xlabel('\u03b8 (rad)') ax2.set_ylabel('\u03b8\u0307 (rad/s)') ax2.set_title('Chaotic Pendulum: Phase Space') ax2.grid(True) plt.tight_layout() plt.show()","title":"6.1 Chaotic Motion in the Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#expected-output","text":"Time Series Plot : Irregular oscillations with no periodic pattern. Phase Space Plot : A strange attractor instead of a closed orbit, characteristic of chaotic dynamics.","title":"Expected Output:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#62-resonance-in-the-forced-damped-pendulum","text":"Resonance occurs when the driving frequency $ \\omega $ is close to the system\u2019s natural frequency $ \\omega_0 = \\sqrt{g/L} $. This results in large oscillations. Let\u2019s simulate resonance by setting: - $ b = 0.1 $ (low damping) - $ A = 0.5 $ (moderate forcing) - $ \\omega = \\omega_0 \\approx 1 $ (resonance condition) # Define the system def resonance_pendulum(state, t, b, A, omega): theta, v = state dtheta_dt = v dv_dt = -b * v - np.sin(theta) + A * np.cos(omega * t) return [dtheta_dt, dv_dt] # Parameters t = np.linspace(0, 100, 5000) # Long simulation to see resonance effects b = 0.1 A = 0.5 omega = 1 # Resonance condition initial_conditions = [0.1, 0] # Solve sol = odeint(resonance_pendulum, initial_conditions, t, args=(b, A, omega)) theta = sol[:, 0] v = sol[:, 1] # Create subplots fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5)) # Time series plot ax1.plot(t, theta, 'b-', label='\u03b8(t)') ax1.set_xlabel('Time (s)') ax1.set_ylabel('\u03b8 (rad)') ax1.set_title('Resonance: \u03b8 vs Time') ax1.grid(True) ax1.legend() # Phase space plot ax2.plot(theta, v, 'r-', lw=0.5) ax2.set_xlabel('\u03b8 (rad)') ax2.set_ylabel('\u03b8\u0307 (rad/s)') ax2.set_title('Resonance: Phase Space') ax2.grid(True) plt.tight_layout() plt.show()","title":"6.2 Resonance in the Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#expected-output_1","text":"Time Series Plot : Oscillations with increasing amplitude over time. Phase Space Plot : Large periodic orbits, showing energy accumulation due to resonance.","title":"Expected Output:"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 1. Theoretical Derivation of Kepler\u2019s Third Law 1.1 Newton's Law of Universal Gravitation The gravitational force between two masses is given by Newton\u2019s Law: \\[ F_g = G \\frac{Mm}{r^2} \\] Where: - \\(F_g\\) is the gravitational force, - \\(G\\) is the universal gravitational constant, - \\(M\\) is the mass of the central (larger) body (e.g., the Sun), - \\(m\\) is the mass of the orbiting body (e.g., a planet), - \\(r\\) is the orbital radius (distance between the centers of the two bodies). 1.2 Centripetal Force Requirement for Circular Motion For an object in circular motion, the centripetal force required to keep it in orbit is: \\[ F_c = \\frac{mv^2}{r} \\] Where: - \\(m\\) is the mass of the orbiting body, - \\(v\\) is its orbital speed, - \\(r\\) is the radius of the circular orbit. 1.3 Equating Gravitational and Centripetal Forces In a stable circular orbit, the gravitational force provides the necessary centripetal force: \\[ F_g = F_c \\] Thus: \\[ G \\frac{Mm}{r^2} = \\frac{mv^2}{r} \\] Cancel \\(m\\) from both sides: \\[ G \\frac{M}{r^2} = \\frac{v^2}{r} \\] Multiply both sides by \\(r\\) : \\[ G \\frac{M}{r} = v^2 \\] 1.4 Orbital Period and Velocity The orbital period \\(T\\) is the time taken to complete one full orbit. For a circular orbit of radius \\(r\\) , the orbital speed \\(v\\) is: \\[ v = \\frac{2\\pi r}{T} \\] Substitute this into the previous equation: \\[ G \\frac{M}{r} = \\left( \\frac{2\\pi r}{T} \\right)^2 \\] Simplify the right-hand side: \\[ G \\frac{M}{r} = \\frac{4\\pi^2 r^2}{T^2} \\] Multiply both sides by \\(T^2\\) : \\[ G M T^2 = 4\\pi^2 r^3 \\] Finally, solve for \\(T^2\\) : \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\] 1.5 Result: Kepler\u2019s Third Law This shows the square of the orbital period is proportional to the cube of the orbital radius: \\[ T^2 \\propto r^3 \\] The constant of proportionality depends on the mass of the central object ( \\(M\\) ): \\[ T^2 = \\left( \\frac{4\\pi^2}{G M} \\right) r^3 \\] This is the mathematical expression of Kepler\u2019s Third Law for circular orbits, derived from Newtonian mechanics. 2. Conceptual Discussion: Significance of Kepler's Third Law 2.1 Importance in Astronomy Kepler\u2019s Third Law: \\[ T^2 \\propto r^3 \\] provides a foundational relationship between the orbital period ( \\(T\\) ) of a body and its average distance ( \\(r\\) ) from the object it orbits. When derived from Newtonian mechanics, this relationship becomes: \\[ T^2 = \\left( \\frac{4\\pi^2}{G M} \\right) r^3 \\] This is significant for several reasons: It connects orbital motion directly to the gravitational force and the mass of the central body . It allows astronomers to infer hidden properties of celestial systems using observable quantities like period and radius. It plays a key role in planetary science , stellar systems , exoplanet detection , and satellite engineering . 2.2 Determining Masses of Celestial Bodies Rearranging the Newtonian form of Kepler\u2019s Third Law: \\[ M = \\frac{4\\pi^2 r^3}{G T^2} \\] This equation enables us to calculate the mass ( \\(M\\) ) of the central object (e.g., Earth, the Sun, or a star), provided the orbital period ( \\(T\\) ) and orbital radius ( \\(r\\) ) of a satellite or planet are known. Example: Knowing the Moon\u2019s orbital radius and period allows us to compute Earth\u2019s mass. Observing the orbit of a moon around Jupiter allows astronomers to determine Jupiter\u2019s mass . 2.3 Measuring Distances Between Planets and Stars If the central mass \\(M\\) is already known (e.g., solar mass), then: \\[ r^3 = \\frac{G M T^2}{4\\pi^2} \\] This allows astronomers to compute orbital radii from observed periods. Applications: Calculating the average distances of planets from the Sun. Estimating the distances of exoplanets from their host stars (based on transit and radial velocity data). 2.4 Applications to Natural and Artificial Satellites Kepler's Third Law is universally valid for any object under gravitational orbit, whether natural or artificial. Natural Satellites: Describes the motion of moons around planets. Crucial for studying tidal locking , orbital resonances , and planetary system formation . Artificial Satellites: Essential for placing satellites in stable orbits around Earth (e.g., geostationary orbit ). Used to design communication satellites, GPS constellations, and space probes. For artificial satellites orbiting Earth: \\[ T^2 = \\left( \\frac{4\\pi^2}{G M_E} \\right) r^3 \\] where \\(M_E\\) is Earth's mass. Engineers use this to determine the required altitude ( \\(r\\) ) for a given orbital period ( \\(T\\) ). 2.5 Summary Kepler\u2019s Third Law is more than a mathematical curiosity\u2014it is a powerful tool for: Estimating masses and distances in the universe. Understanding both natural orbital mechanics and human-made satellite systems . Providing a bridge between observable orbital motion and invisible gravitational forces . 3. Real-World Applications of Kepler\u2019s Third Law Kepler\u2019s Third Law, in its Newtonian form: \\[ T^2 = \\left( \\frac{4\\pi^2}{G M} \\right) r^3 \\] can be tested and verified using real astronomical and artificial satellite data. The law enables calculations of orbital parameters across a wide range of systems\u2014from the Moon to distant planets, to GPS satellites. 3.1 The Moon Orbiting Earth Known values: - Orbital radius: \\(r \\approx 3.84 \\times 10^8 \\ \\text{m}\\) - Orbital period: \\(T \\approx 27.32 \\ \\text{days} \\approx 2.36 \\times 10^6 \\ \\text{s}\\) - Mass of Earth: \\(M_E \\approx 5.97 \\times 10^{24} \\ \\text{kg}\\) Prediction using Newtonian Kepler\u2019s Law: \\[ T^2 = \\frac{4\\pi^2 r^3}{G M_E} \\] Plugging in values: \\[ T^2 \\approx \\frac{4\\pi^2 (3.84 \\times 10^8)^3}{6.674 \\times 10^{-11} \\cdot 5.97 \\times 10^{24}} \\approx 5.57 \\times 10^{12} \\ \\text{s}^2 \\] Taking square root: \\[ T \\approx \\sqrt{5.57 \\times 10^{12}} \\approx 2.36 \\times 10^6 \\ \\text{s} \\] \u2705 Match with observed period confirms validity. 3.2 Earth and Planets Orbiting the Sun Standard form using Astronomical Units (AU) and Earth years: If \\(T\\) is in Earth years and \\(r\\) in AU (Astronomical Units), then: \\[ T^2 = r^3 \\] Planet Orbital Radius \\(r\\) (AU) Period \\(T\\) (years) \\(T^2\\) \\(r^3\\) Earth 1.00 1.00 1.00 1.00 Mars 1.52 1.88 3.53 3.51 Jupiter 5.20 11.86 140.7 140.6 Saturn 9.58 29.46 867.9 880.3 \u2705 Close agreement of \\(T^2\\) and \\(r^3\\) supports Kepler's Law. 3.3 Artificial Satellites (e.g., GPS Satellites) GPS satellite parameters: - Orbital radius: \\(r \\approx 2.66 \\times 10^7 \\ \\text{m}\\) - Orbital period: \\(T \\approx 12 \\ \\text{hours} \\approx 4.32 \\times 10^4 \\ \\text{s}\\) - Mass of Earth: \\(M_E = 5.97 \\times 10^{24} \\ \\text{kg}\\) Use Kepler\u2019s Law: \\[ T^2 = \\frac{4\\pi^2 r^3}{G M_E} \\] Calculate predicted \\(T\\) : \\[ T \\approx \\sqrt{ \\frac{4\\pi^2 (2.66 \\times 10^7)^3}{6.674 \\times 10^{-11} \\cdot 5.97 \\times 10^{24}} } \\approx 4.32 \\times 10^4 \\ \\text{s} \\] \u2705 Prediction matches design specification for GPS satellites. Comparison Summary Kepler\u2019s Third Law accurately predicts orbital behavior across: Natural satellites (e.g., Moon, planetary moons). Planetary orbits (in both AU and SI units). Artificial satellites (critical for telecommunications and navigation). This universality confirms the power and elegance of Kepler\u2019s Third Law when paired with Newton\u2019s laws of motion and gravitation. 4. Visualization and Verification 4.1 Real Data Plot: \\(T^2\\) vs \\(r^3\\) for Planets To test Kepler\u2019s Third Law using Solar System planets, we compute \\(T^2\\) and \\(r^3\\) using known orbital data: \\(r\\) : orbital radius in AU \\(T\\) : orbital period in Earth years We expect: \\[ T^2 = r^3 \\] import matplotlib.pyplot as plt import numpy as np # Planetary data planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'] r = np.array([0.39, 0.72, 1.00, 1.52, 5.20, 9.58]) # AU T = np.array([0.24, 0.62, 1.00, 1.88, 11.86, 29.46]) # years T_squared = T**2 r_cubed = r**3 plt.figure(figsize=(8, 5)) plt.scatter(r_cubed, T_squared, color='teal', s=70, edgecolor='black') for i, planet in enumerate(planets): plt.annotate(planet, (r_cubed[i], T_squared[i]), textcoords=\"offset points\", xytext=(5,5)) plt.title(\"$T^2$ vs $r^3$ for Planets in the Solar System\", fontsize=14) plt.xlabel(\"$r^3$ (AU\u00b3)\") plt.ylabel(\"$T^2$ (years\u00b2)\") plt.grid(True, linestyle='--', alpha=0.6) plt.tight_layout() plt.show() import matplotlib.pyplot as plt import numpy as np # Planetary data planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'] r = np.array([0.39, 0.72, 1.00, 1.52, 5.20, 9.58]) # AU T = np.array([0.24, 0.62, 1.00, 1.88, 11.86, 29.46]) # years # Compute T^2 and r^3 T_squared = T**2 r_cubed = r**3 # Plot in log-log scale plt.figure(figsize=(8, 5)) plt.loglog(r_cubed, T_squared, 'o', color='teal', markersize=8, markeredgecolor='black') # Annotations for i, planet in enumerate(planets): plt.annotate(planet, (r_cubed[i], T_squared[i]), textcoords=\"offset points\", xytext=(6,4)) plt.title(\"Log-Log Plot: $T^2$ vs $r^3$ for Planets\", fontsize=14) plt.xlabel(\"$r^3$ (AU\u00b3)\", fontsize=12) plt.ylabel(\"$T^2$ (years\u00b2)\", fontsize=12) plt.grid(True, which='both', linestyle='--', alpha=0.6) plt.tight_layout() plt.show() 4.2 Real Data: Log-Log Plot and Slope Verification To avoid compression near the origin and test proportionality: Transform both sides to logarithmic scale. Fit a line to the log-log data. Slope \\(\\approx 1\\) confirms \\(T^2 \\propto r^3\\) . from scipy.stats import linregress log_r3 = np.log10(r_cubed) log_T2 = np.log10(T_squared) slope, intercept, r_value, _, _ = linregress(log_r3, log_T2) plt.figure(figsize=(8, 5)) plt.plot(log_r3, log_T2, 'o-', color='darkgreen') plt.title(\"Log-Log Plot: $\\\\log(T^2)$ vs $\\\\log(r^3)$\", fontsize=14) plt.xlabel(\"$\\\\log(r^3)$\") plt.ylabel(\"$\\\\log(T^2)$\") plt.grid(True, which='both', linestyle='--', alpha=0.6) plt.text(min(log_r3), max(log_T2)-0.2, f\"Slope \u2248 {slope:.3f}\", color='red', fontsize=12) plt.tight_layout() plt.show() 4.3 Simulated Data: Verifying \\(T^2 \\propto r^3\\) Using Newton\u2019s formulation: \\[ T = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] Simulate orbits for different radii and verify \\(T^2\\) vs \\(r^3\\) . # Simulate a system with Sun-like central mass G = 6.674e-11 # m^3 kg^-1 s^-2 M = 1.989e30 # kg (Sun's mass) r_vals = np.linspace(0.5e11, 2.5e11, 6) # meters T_vals = 2 * np.pi * np.sqrt(r_vals**3 / (G * M)) # seconds # Convert to AU and years AU = 1.496e11 year = 3.154e7 r_AU = r_vals / AU T_years = T_vals / year plt.figure(figsize=(8, 5)) plt.plot(r_AU**3, T_years**2, 'o-', color='darkorange') plt.title(\"Simulated: $T^2$ vs $r^3$\", fontsize=14) plt.xlabel(\"$r^3$ (AU\u00b3)\") plt.ylabel(\"$T^2$ (years\u00b2)\") plt.grid(True, linestyle='--', alpha=0.6) plt.tight_layout() plt.show() 4.4 Simulated Log-Log Plot and Slope Check log_r_sim = np.log10(r_AU**3) log_T_sim = np.log10(T_years**2) slope_sim, _, _, _, _ = linregress(log_r_sim, log_T_sim) plt.figure(figsize=(8, 5)) plt.plot(log_r_sim, log_T_sim, 'o-', color='purple') plt.title(\"Simulated: Log-Log Plot\", fontsize=14) plt.xlabel(\"$\\\\log(r^3)$\") plt.ylabel(\"$\\\\log(T^2)$\") plt.grid(True, which='both', linestyle='--', alpha=0.6) plt.text(min(log_r_sim), max(log_T_sim)-0.2, f\"Slope \u2248 {slope_sim:.3f}\", color='red', fontsize=12) plt.tight_layout() plt.show() 4.5 Simulated Orbit Animation: Earth Orbiting the Sun To enhance visual understanding, we simulate the circular orbit of Earth around the Sun using matplotlib.animation . This helps demonstrate: Constant radius motion in a circular orbit Uniform angular speed Central gravitational attraction (Sun remains at the focus) import numpy as np import matplotlib.pyplot as plt import matplotlib.animation as animation from IPython.display import HTML # Constants G = 6.674e-11 # Gravitational constant (m^3/kg/s^2) M = 1.989e30 # Mass of the Sun (kg) r = 1.5e11 # Orbital radius (1 AU in meters) # Generate orbital positions theta = np.linspace(0, 2 * np.pi, 360) x = r * np.cos(theta) y = r * np.sin(theta) # Set up the figure fig, ax = plt.subplots(figsize=(6,6)) planet, = ax.plot([], [], 'bo', markersize=8) # Earth sun, = ax.plot(0, 0, 'yo', markersize=12) # Sun orbit, = ax.plot(x, y, 'k--', linewidth=0.5) # Orbit path ax.set_xlim(-r * 1.2, r * 1.2) ax.set_ylim(-r * 1.2, r * 1.2) ax.set_aspect('equal') ax.set_title('Earth Orbiting the Sun') # Animation update function def update(frame): planet.set_data([x[frame]], [y[frame]]) return planet, # Create animation ani = animation.FuncAnimation(fig, update, frames=len(theta), interval=20) # Display animation (for Jupyter/Colab) HTML(ani.to_jshtml()) 5. Conclusion Kepler\u2019s Third Law, which relates the square of the orbital period to the cube of the orbital radius ( \\(T^2 \\propto r^3\\) ), stands as a cornerstone of classical and celestial mechanics. Through theoretical derivation from Newton\u2019s laws, conceptual interpretation, real-world validation, and computational modeling, we have demonstrated its universality and predictive power. Theoretically , we derived the law from Newton's law of gravitation and circular motion, showing how gravitational interactions dictate orbital dynamics. Conceptually , we discussed its significance in astronomy, especially in calculating the masses of celestial bodies and determining distances in planetary systems. Empirically , we validated the law using real astronomical data from the Solar System and artificial satellites, all of which confirm the \\(T^2 \\propto r^3\\) relationship with high precision. Computationally , we simulated orbits using Newtonian mechanics and verified the proportionality through numerical data and log-log analysis. This multifaceted approach not only reinforces the law\u2019s correctness but also showcases its essential role in both scientific understanding and modern technological applications. Kepler\u2019s Third Law exemplifies the profound connection between simple mathematical relationships and the grand structure of the cosmos. 6. Colab Souce Code","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#1-theoretical-derivation-of-keplers-third-law","text":"","title":"1. Theoretical Derivation of Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#11-newtons-law-of-universal-gravitation","text":"The gravitational force between two masses is given by Newton\u2019s Law: \\[ F_g = G \\frac{Mm}{r^2} \\] Where: - \\(F_g\\) is the gravitational force, - \\(G\\) is the universal gravitational constant, - \\(M\\) is the mass of the central (larger) body (e.g., the Sun), - \\(m\\) is the mass of the orbiting body (e.g., a planet), - \\(r\\) is the orbital radius (distance between the centers of the two bodies).","title":"1.1 Newton's Law of Universal Gravitation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#12-centripetal-force-requirement-for-circular-motion","text":"For an object in circular motion, the centripetal force required to keep it in orbit is: \\[ F_c = \\frac{mv^2}{r} \\] Where: - \\(m\\) is the mass of the orbiting body, - \\(v\\) is its orbital speed, - \\(r\\) is the radius of the circular orbit.","title":"1.2 Centripetal Force Requirement for Circular Motion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#13-equating-gravitational-and-centripetal-forces","text":"In a stable circular orbit, the gravitational force provides the necessary centripetal force: \\[ F_g = F_c \\] Thus: \\[ G \\frac{Mm}{r^2} = \\frac{mv^2}{r} \\] Cancel \\(m\\) from both sides: \\[ G \\frac{M}{r^2} = \\frac{v^2}{r} \\] Multiply both sides by \\(r\\) : \\[ G \\frac{M}{r} = v^2 \\]","title":"1.3 Equating Gravitational and Centripetal Forces"},{"location":"1%20Physics/2%20Gravity/Problem_1/#14-orbital-period-and-velocity","text":"The orbital period \\(T\\) is the time taken to complete one full orbit. For a circular orbit of radius \\(r\\) , the orbital speed \\(v\\) is: \\[ v = \\frac{2\\pi r}{T} \\] Substitute this into the previous equation: \\[ G \\frac{M}{r} = \\left( \\frac{2\\pi r}{T} \\right)^2 \\] Simplify the right-hand side: \\[ G \\frac{M}{r} = \\frac{4\\pi^2 r^2}{T^2} \\] Multiply both sides by \\(T^2\\) : \\[ G M T^2 = 4\\pi^2 r^3 \\] Finally, solve for \\(T^2\\) : \\[ T^2 = \\frac{4\\pi^2}{G M} r^3 \\]","title":"1.4 Orbital Period and Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_1/#15-result-keplers-third-law","text":"This shows the square of the orbital period is proportional to the cube of the orbital radius: \\[ T^2 \\propto r^3 \\] The constant of proportionality depends on the mass of the central object ( \\(M\\) ): \\[ T^2 = \\left( \\frac{4\\pi^2}{G M} \\right) r^3 \\] This is the mathematical expression of Kepler\u2019s Third Law for circular orbits, derived from Newtonian mechanics.","title":"1.5 Result: Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#2-conceptual-discussion-significance-of-keplers-third-law","text":"","title":"2. Conceptual Discussion: Significance of Kepler's Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#21-importance-in-astronomy","text":"Kepler\u2019s Third Law: \\[ T^2 \\propto r^3 \\] provides a foundational relationship between the orbital period ( \\(T\\) ) of a body and its average distance ( \\(r\\) ) from the object it orbits. When derived from Newtonian mechanics, this relationship becomes: \\[ T^2 = \\left( \\frac{4\\pi^2}{G M} \\right) r^3 \\] This is significant for several reasons: It connects orbital motion directly to the gravitational force and the mass of the central body . It allows astronomers to infer hidden properties of celestial systems using observable quantities like period and radius. It plays a key role in planetary science , stellar systems , exoplanet detection , and satellite engineering .","title":"2.1 Importance in Astronomy"},{"location":"1%20Physics/2%20Gravity/Problem_1/#22-determining-masses-of-celestial-bodies","text":"Rearranging the Newtonian form of Kepler\u2019s Third Law: \\[ M = \\frac{4\\pi^2 r^3}{G T^2} \\] This equation enables us to calculate the mass ( \\(M\\) ) of the central object (e.g., Earth, the Sun, or a star), provided the orbital period ( \\(T\\) ) and orbital radius ( \\(r\\) ) of a satellite or planet are known.","title":"2.2 Determining Masses of Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_1/#example","text":"Knowing the Moon\u2019s orbital radius and period allows us to compute Earth\u2019s mass. Observing the orbit of a moon around Jupiter allows astronomers to determine Jupiter\u2019s mass .","title":"Example:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#23-measuring-distances-between-planets-and-stars","text":"If the central mass \\(M\\) is already known (e.g., solar mass), then: \\[ r^3 = \\frac{G M T^2}{4\\pi^2} \\] This allows astronomers to compute orbital radii from observed periods.","title":"2.3 Measuring Distances Between Planets and Stars"},{"location":"1%20Physics/2%20Gravity/Problem_1/#applications","text":"Calculating the average distances of planets from the Sun. Estimating the distances of exoplanets from their host stars (based on transit and radial velocity data).","title":"Applications:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#24-applications-to-natural-and-artificial-satellites","text":"Kepler's Third Law is universally valid for any object under gravitational orbit, whether natural or artificial.","title":"2.4 Applications to Natural and Artificial Satellites"},{"location":"1%20Physics/2%20Gravity/Problem_1/#natural-satellites","text":"Describes the motion of moons around planets. Crucial for studying tidal locking , orbital resonances , and planetary system formation .","title":"Natural Satellites:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#artificial-satellites","text":"Essential for placing satellites in stable orbits around Earth (e.g., geostationary orbit ). Used to design communication satellites, GPS constellations, and space probes. For artificial satellites orbiting Earth: \\[ T^2 = \\left( \\frac{4\\pi^2}{G M_E} \\right) r^3 \\] where \\(M_E\\) is Earth's mass. Engineers use this to determine the required altitude ( \\(r\\) ) for a given orbital period ( \\(T\\) ).","title":"Artificial Satellites:"},{"location":"1%20Physics/2%20Gravity/Problem_1/#25-summary","text":"Kepler\u2019s Third Law is more than a mathematical curiosity\u2014it is a powerful tool for: Estimating masses and distances in the universe. Understanding both natural orbital mechanics and human-made satellite systems . Providing a bridge between observable orbital motion and invisible gravitational forces .","title":"2.5 Summary"},{"location":"1%20Physics/2%20Gravity/Problem_1/#3-real-world-applications-of-keplers-third-law","text":"Kepler\u2019s Third Law, in its Newtonian form: \\[ T^2 = \\left( \\frac{4\\pi^2}{G M} \\right) r^3 \\] can be tested and verified using real astronomical and artificial satellite data. The law enables calculations of orbital parameters across a wide range of systems\u2014from the Moon to distant planets, to GPS satellites.","title":"3. Real-World Applications of Kepler\u2019s Third Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#31-the-moon-orbiting-earth","text":"Known values: - Orbital radius: \\(r \\approx 3.84 \\times 10^8 \\ \\text{m}\\) - Orbital period: \\(T \\approx 27.32 \\ \\text{days} \\approx 2.36 \\times 10^6 \\ \\text{s}\\) - Mass of Earth: \\(M_E \\approx 5.97 \\times 10^{24} \\ \\text{kg}\\) Prediction using Newtonian Kepler\u2019s Law: \\[ T^2 = \\frac{4\\pi^2 r^3}{G M_E} \\] Plugging in values: \\[ T^2 \\approx \\frac{4\\pi^2 (3.84 \\times 10^8)^3}{6.674 \\times 10^{-11} \\cdot 5.97 \\times 10^{24}} \\approx 5.57 \\times 10^{12} \\ \\text{s}^2 \\] Taking square root: \\[ T \\approx \\sqrt{5.57 \\times 10^{12}} \\approx 2.36 \\times 10^6 \\ \\text{s} \\] \u2705 Match with observed period confirms validity.","title":"3.1 The Moon Orbiting Earth"},{"location":"1%20Physics/2%20Gravity/Problem_1/#32-earth-and-planets-orbiting-the-sun","text":"Standard form using Astronomical Units (AU) and Earth years: If \\(T\\) is in Earth years and \\(r\\) in AU (Astronomical Units), then: \\[ T^2 = r^3 \\] Planet Orbital Radius \\(r\\) (AU) Period \\(T\\) (years) \\(T^2\\) \\(r^3\\) Earth 1.00 1.00 1.00 1.00 Mars 1.52 1.88 3.53 3.51 Jupiter 5.20 11.86 140.7 140.6 Saturn 9.58 29.46 867.9 880.3 \u2705 Close agreement of \\(T^2\\) and \\(r^3\\) supports Kepler's Law.","title":"3.2 Earth and Planets Orbiting the Sun"},{"location":"1%20Physics/2%20Gravity/Problem_1/#33-artificial-satellites-eg-gps-satellites","text":"GPS satellite parameters: - Orbital radius: \\(r \\approx 2.66 \\times 10^7 \\ \\text{m}\\) - Orbital period: \\(T \\approx 12 \\ \\text{hours} \\approx 4.32 \\times 10^4 \\ \\text{s}\\) - Mass of Earth: \\(M_E = 5.97 \\times 10^{24} \\ \\text{kg}\\) Use Kepler\u2019s Law: \\[ T^2 = \\frac{4\\pi^2 r^3}{G M_E} \\] Calculate predicted \\(T\\) : \\[ T \\approx \\sqrt{ \\frac{4\\pi^2 (2.66 \\times 10^7)^3}{6.674 \\times 10^{-11} \\cdot 5.97 \\times 10^{24}} } \\approx 4.32 \\times 10^4 \\ \\text{s} \\] \u2705 Prediction matches design specification for GPS satellites.","title":"3.3 Artificial Satellites (e.g., GPS Satellites)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#comparison-summary","text":"Kepler\u2019s Third Law accurately predicts orbital behavior across: Natural satellites (e.g., Moon, planetary moons). Planetary orbits (in both AU and SI units). Artificial satellites (critical for telecommunications and navigation). This universality confirms the power and elegance of Kepler\u2019s Third Law when paired with Newton\u2019s laws of motion and gravitation.","title":"Comparison Summary"},{"location":"1%20Physics/2%20Gravity/Problem_1/#4-visualization-and-verification","text":"","title":"4. Visualization and Verification"},{"location":"1%20Physics/2%20Gravity/Problem_1/#41-real-data-plot-t2-vs-r3-for-planets","text":"To test Kepler\u2019s Third Law using Solar System planets, we compute \\(T^2\\) and \\(r^3\\) using known orbital data: \\(r\\) : orbital radius in AU \\(T\\) : orbital period in Earth years We expect: \\[ T^2 = r^3 \\] import matplotlib.pyplot as plt import numpy as np # Planetary data planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'] r = np.array([0.39, 0.72, 1.00, 1.52, 5.20, 9.58]) # AU T = np.array([0.24, 0.62, 1.00, 1.88, 11.86, 29.46]) # years T_squared = T**2 r_cubed = r**3 plt.figure(figsize=(8, 5)) plt.scatter(r_cubed, T_squared, color='teal', s=70, edgecolor='black') for i, planet in enumerate(planets): plt.annotate(planet, (r_cubed[i], T_squared[i]), textcoords=\"offset points\", xytext=(5,5)) plt.title(\"$T^2$ vs $r^3$ for Planets in the Solar System\", fontsize=14) plt.xlabel(\"$r^3$ (AU\u00b3)\") plt.ylabel(\"$T^2$ (years\u00b2)\") plt.grid(True, linestyle='--', alpha=0.6) plt.tight_layout() plt.show() import matplotlib.pyplot as plt import numpy as np # Planetary data planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'] r = np.array([0.39, 0.72, 1.00, 1.52, 5.20, 9.58]) # AU T = np.array([0.24, 0.62, 1.00, 1.88, 11.86, 29.46]) # years # Compute T^2 and r^3 T_squared = T**2 r_cubed = r**3 # Plot in log-log scale plt.figure(figsize=(8, 5)) plt.loglog(r_cubed, T_squared, 'o', color='teal', markersize=8, markeredgecolor='black') # Annotations for i, planet in enumerate(planets): plt.annotate(planet, (r_cubed[i], T_squared[i]), textcoords=\"offset points\", xytext=(6,4)) plt.title(\"Log-Log Plot: $T^2$ vs $r^3$ for Planets\", fontsize=14) plt.xlabel(\"$r^3$ (AU\u00b3)\", fontsize=12) plt.ylabel(\"$T^2$ (years\u00b2)\", fontsize=12) plt.grid(True, which='both', linestyle='--', alpha=0.6) plt.tight_layout() plt.show()","title":"4.1 Real Data Plot: \\(T^2\\) vs \\(r^3\\) for Planets"},{"location":"1%20Physics/2%20Gravity/Problem_1/#42-real-data-log-log-plot-and-slope-verification","text":"To avoid compression near the origin and test proportionality: Transform both sides to logarithmic scale. Fit a line to the log-log data. Slope \\(\\approx 1\\) confirms \\(T^2 \\propto r^3\\) . from scipy.stats import linregress log_r3 = np.log10(r_cubed) log_T2 = np.log10(T_squared) slope, intercept, r_value, _, _ = linregress(log_r3, log_T2) plt.figure(figsize=(8, 5)) plt.plot(log_r3, log_T2, 'o-', color='darkgreen') plt.title(\"Log-Log Plot: $\\\\log(T^2)$ vs $\\\\log(r^3)$\", fontsize=14) plt.xlabel(\"$\\\\log(r^3)$\") plt.ylabel(\"$\\\\log(T^2)$\") plt.grid(True, which='both', linestyle='--', alpha=0.6) plt.text(min(log_r3), max(log_T2)-0.2, f\"Slope \u2248 {slope:.3f}\", color='red', fontsize=12) plt.tight_layout() plt.show()","title":"4.2 Real Data: Log-Log Plot and Slope Verification"},{"location":"1%20Physics/2%20Gravity/Problem_1/#43-simulated-data-verifying-t2-propto-r3","text":"Using Newton\u2019s formulation: \\[ T = 2\\pi \\sqrt{\\frac{r^3}{G M}} \\] Simulate orbits for different radii and verify \\(T^2\\) vs \\(r^3\\) . # Simulate a system with Sun-like central mass G = 6.674e-11 # m^3 kg^-1 s^-2 M = 1.989e30 # kg (Sun's mass) r_vals = np.linspace(0.5e11, 2.5e11, 6) # meters T_vals = 2 * np.pi * np.sqrt(r_vals**3 / (G * M)) # seconds # Convert to AU and years AU = 1.496e11 year = 3.154e7 r_AU = r_vals / AU T_years = T_vals / year plt.figure(figsize=(8, 5)) plt.plot(r_AU**3, T_years**2, 'o-', color='darkorange') plt.title(\"Simulated: $T^2$ vs $r^3$\", fontsize=14) plt.xlabel(\"$r^3$ (AU\u00b3)\") plt.ylabel(\"$T^2$ (years\u00b2)\") plt.grid(True, linestyle='--', alpha=0.6) plt.tight_layout() plt.show()","title":"4.3 Simulated Data: Verifying \\(T^2 \\propto r^3\\)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#44-simulated-log-log-plot-and-slope-check","text":"log_r_sim = np.log10(r_AU**3) log_T_sim = np.log10(T_years**2) slope_sim, _, _, _, _ = linregress(log_r_sim, log_T_sim) plt.figure(figsize=(8, 5)) plt.plot(log_r_sim, log_T_sim, 'o-', color='purple') plt.title(\"Simulated: Log-Log Plot\", fontsize=14) plt.xlabel(\"$\\\\log(r^3)$\") plt.ylabel(\"$\\\\log(T^2)$\") plt.grid(True, which='both', linestyle='--', alpha=0.6) plt.text(min(log_r_sim), max(log_T_sim)-0.2, f\"Slope \u2248 {slope_sim:.3f}\", color='red', fontsize=12) plt.tight_layout() plt.show()","title":"4.4 Simulated Log-Log Plot and Slope Check"},{"location":"1%20Physics/2%20Gravity/Problem_1/#45-simulated-orbit-animation-earth-orbiting-the-sun","text":"To enhance visual understanding, we simulate the circular orbit of Earth around the Sun using matplotlib.animation . This helps demonstrate: Constant radius motion in a circular orbit Uniform angular speed Central gravitational attraction (Sun remains at the focus) import numpy as np import matplotlib.pyplot as plt import matplotlib.animation as animation from IPython.display import HTML # Constants G = 6.674e-11 # Gravitational constant (m^3/kg/s^2) M = 1.989e30 # Mass of the Sun (kg) r = 1.5e11 # Orbital radius (1 AU in meters) # Generate orbital positions theta = np.linspace(0, 2 * np.pi, 360) x = r * np.cos(theta) y = r * np.sin(theta) # Set up the figure fig, ax = plt.subplots(figsize=(6,6)) planet, = ax.plot([], [], 'bo', markersize=8) # Earth sun, = ax.plot(0, 0, 'yo', markersize=12) # Sun orbit, = ax.plot(x, y, 'k--', linewidth=0.5) # Orbit path ax.set_xlim(-r * 1.2, r * 1.2) ax.set_ylim(-r * 1.2, r * 1.2) ax.set_aspect('equal') ax.set_title('Earth Orbiting the Sun') # Animation update function def update(frame): planet.set_data([x[frame]], [y[frame]]) return planet, # Create animation ani = animation.FuncAnimation(fig, update, frames=len(theta), interval=20) # Display animation (for Jupyter/Colab) HTML(ani.to_jshtml())","title":"4.5 Simulated Orbit Animation: Earth Orbiting the Sun"},{"location":"1%20Physics/2%20Gravity/Problem_1/#5-conclusion","text":"Kepler\u2019s Third Law, which relates the square of the orbital period to the cube of the orbital radius ( \\(T^2 \\propto r^3\\) ), stands as a cornerstone of classical and celestial mechanics. Through theoretical derivation from Newton\u2019s laws, conceptual interpretation, real-world validation, and computational modeling, we have demonstrated its universality and predictive power. Theoretically , we derived the law from Newton's law of gravitation and circular motion, showing how gravitational interactions dictate orbital dynamics. Conceptually , we discussed its significance in astronomy, especially in calculating the masses of celestial bodies and determining distances in planetary systems. Empirically , we validated the law using real astronomical data from the Solar System and artificial satellites, all of which confirm the \\(T^2 \\propto r^3\\) relationship with high precision. Computationally , we simulated orbits using Newtonian mechanics and verified the proportionality through numerical data and log-log analysis. This multifaceted approach not only reinforces the law\u2019s correctness but also showcases its essential role in both scientific understanding and modern technological applications. Kepler\u2019s Third Law exemplifies the profound connection between simple mathematical relationships and the grand structure of the cosmos.","title":"5. Conclusion"},{"location":"1%20Physics/2%20Gravity/Problem_1/#6-colab","text":"Souce Code","title":"6. Colab"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2 Definitions & Concepts 1.1 Escape Velocity Escape velocity is the minimum speed an object must reach to break free from the gravitational pull of a celestial body, without any further propulsion. The general formula for escape velocity is derived from the conservation of energy: \\[ \\frac{1}{2}mv^2 = \\frac{GMm}{r} \\] Solving for velocity: \\[ v_{esc} = \\sqrt{\\frac{2GM}{r}} \\] Where: - \\(v_{esc}\\) is the escape velocity, - \\(G\\) is the gravitational constant \\((6.674 \\times 10^{-11}\\,\\text{m}^3\\,\\text{kg}^{-1}\\,\\text{s}^{-2})\\) , - \\(M\\) is the mass of the celestial body, - \\(r\\) is the distance from the center of the body to the point of escape (typically the planet\u2019s radius). 1.2 First Cosmic Velocity (Orbital Velocity) The first cosmic velocity refers to the minimum horizontal speed an object must have to remain in a stable, circular orbit just above the surface of a celestial body, without falling back to the surface. It is derived by equating gravitational force to centripetal force: \\[ \\frac{GMm}{r^2} = \\frac{mv^2}{r} \\] Solving for \\(v\\) : \\[ v_{orb} = \\sqrt{\\frac{GM}{r}} \\] This is also called the orbital velocity , and it is lower than escape velocity: \\[ v_{orb} = \\frac{v_{esc}}{\\sqrt{2}} \\] 1.3 Second Cosmic Velocity The second cosmic velocity is simply another term for escape velocity from a planetary body. It is the minimum speed required to completely escape the gravitational influence of the planet and enter into space, assuming no further propulsion. Thus: \\[ v_{2nd} = v_{esc} = \\sqrt{\\frac{2GM}{r}} \\] 1.4 Third Cosmic Velocity The third cosmic velocity is the speed required for a spacecraft to escape not only Earth\u2019s gravity, but also the Sun\u2019s gravity, starting from Earth\u2019s orbit. This is relevant for interstellar missions. This involves both Earth\u2019s orbital velocity around the Sun and the Sun\u2019s gravitational influence. It can be approximated by: \\[ v_{3rd} = \\sqrt{v_{esc,\\odot}^2 + v_{orb,\\oplus}^2} \\] Where: - \\(v_{esc,\\odot}\\) is the escape velocity from the Sun at Earth\u2019s distance, - \\(v_{orb,\\oplus}\\) is Earth\u2019s orbital speed around the Sun ( \\(\\approx 29.78\\,\\text{km/s}\\) ). A simplified expression (ignoring Earth's gravity) for escaping the Solar System from Earth\u2019s orbit: \\[ v_{3rd} \\approx \\sqrt{\\frac{2GM_{\\odot}}{r_{\\oplus}}} \\] Where: - \\(M_{\\odot}\\) is the mass of the Sun, - \\(r_{\\oplus}\\) is the average distance from Earth to the Sun ( \\(\\approx 1.496 \\times 10^{11}\\,\\text{m}\\) ). 1.5 Physical Meaning in Space Exploration First Cosmic Velocity is the target speed for launching satellites into low Earth orbit. It represents the threshold for achieving continuous free-fall around Earth. Second Cosmic Velocity is critical for missions intending to leave Earth's orbit \u2014 such as lunar missions or probes bound for other planets. Third Cosmic Velocity pertains to missions aiming to exit the Solar System, such as the Voyager and Pioneer spacecraft. Achieving this velocity allows an object to overcome the Sun\u2019s gravitational hold. Understanding these velocities is fundamental for determining fuel requirements, launch windows, and mission design in astrodynamics and interplanetary navigation . Mathematical Derivations 2.1 Escape Velocity To derive the escape velocity, we equate the kinetic energy of an object to the gravitational potential energy required to escape the gravitational field of a body. Kinetic energy of the object: $$ KE = \\frac{1}{2}mv^2 $$ Gravitational potential energy of the object (at distance \\(r\\) from the center of mass \\(M\\) ): $$ U = -\\frac{GMm}{r} $$ For escape, the total mechanical energy must be zero: \\[ \\frac{1}{2}mv^2 - \\frac{GMm}{r} = 0 \\] Solving for \\(v\\) : \\[ v_{esc} = \\sqrt{\\frac{2GM}{r}} \\] This velocity is independent of the mass of the escaping object and depends only on the mass and radius of the celestial body. 2.2 First Cosmic Velocity (Orbital Velocity) This is the velocity required to keep an object in circular orbit just above the surface of a planet. It is derived by balancing the gravitational force and the required centripetal force: Gravitational force: $$ F_g = \\frac{GMm}{r^2} $$ Centripetal force: $$ F_c = \\frac{mv^2}{r} $$ Setting \\(F_g = F_c\\) : \\[ \\frac{GMm}{r^2} = \\frac{mv^2}{r} \\] Cancelling \\(m\\) and solving for \\(v\\) : \\[ v_{orb} = \\sqrt{\\frac{GM}{r}} \\] This is the first cosmic velocity and is precisely the speed needed for stable circular orbit at altitude zero (neglecting atmosphere). 2.3 Third Cosmic Velocity The third cosmic velocity is the speed required to escape the Sun\u2019s gravitational field from Earth\u2019s orbit. The Sun\u2019s gravitational potential energy at Earth\u2019s orbital distance: \\[ U = -\\frac{GM_{\\odot}m}{r_{\\oplus}} \\] Kinetic energy needed to escape from the Sun\u2019s gravity: \\[ \\frac{1}{2}mv^2 = \\frac{GM_{\\odot}m}{r_{\\oplus}} \\] Solving for \\(v\\) : \\[ v_{3rd} = \\sqrt{\\frac{2GM_{\\odot}}{r_{\\oplus}}} \\] However, since Earth is already moving at orbital velocity \\(v_{\\oplus} \\approx 29.78\\) km/s, the spacecraft only needs additional velocity beyond this: \\[ v_{3rd,\\,launch} = \\sqrt{v_{esc,\\odot}^2 + v_{\\oplus}^2} \\] In practice, this value is adjusted depending on the spacecraft's launch trajectory and timing (e.g., gravity assists). 2.4 Influence of Mass and Radius From the escape velocity formula: \\[ v_{esc} = \\sqrt{\\frac{2GM}{r}}, \\quad v_{orb} = \\sqrt{\\frac{GM}{r}} \\] We can draw the following conclusions: Mass ( \\(M\\) ) : As the mass of the celestial body increases, both escape and orbital velocities increase. Radius ( \\(r\\) ) : As the radius increases, the velocities decrease. This is because the gravitational potential becomes weaker farther from the center of mass. Thus, denser and more massive planets like Jupiter have significantly higher escape velocities than Mars . 2.5 Assumptions in Derivations These derivations rely on several simplifying assumptions: The celestial body is a perfect sphere with mass concentrated at the center (i.e., it behaves as a point mass). No atmospheric drag or air resistance is considered (ideal vacuum conditions). No rotational effects (e.g., Coriolis force or frame-dragging from planet spin). The motion is assumed to be purely radial (for escape) or circular (for orbit). The object has no propulsion after initial velocity is imparted (i.e., ballistic motion). These assumptions allow for clean analytical expressions but differ from real-world engineering, where rocket burns, drag, and non-uniform mass distributions are considered. Calculations 3.1 Constants and Celestial Parameters We begin by defining the necessary physical constants and planetary data: Universal Constants Gravitational constant: $$ G = 6.674 \\times 10^{-11}\\,\\text{m}^3\\,\\text{kg}^{-1}\\,\\text{s}^{-2} $$ Planetary Data Planet Mass \\((M)\\) [kg] Radius \\((r)\\) [m] Distance from Sun \\((r_{\\odot})\\) [m] Earth \\(5.972 \\times 10^{24}\\) \\(6.371 \\times 10^6\\) \\(1.496 \\times 10^{11}\\) Mars \\(6.417 \\times 10^{23}\\) \\(3.390 \\times 10^6\\) \\(2.279 \\times 10^{11}\\) Jupiter \\(1.898 \\times 10^{27}\\) \\(6.9911 \\times 10^7\\) \\(7.785 \\times 10^{11}\\) Solar Mass Mass of the Sun: $$ M_{\\odot} = 1.989 \\times 10^{30}\\,\\text{kg} $$ 3.2 Formulas First Cosmic Velocity (Orbital): $$ v_{orb} = \\sqrt{\\frac{GM}{r}} $$ Second Cosmic Velocity (Escape): $$ v_{esc} = \\sqrt{\\frac{2GM}{r}} $$ Third Cosmic Velocity (Escape from the Sun at planetary orbit): $$ v_{3rd} = \\sqrt{\\frac{2GM_{\\odot}}{r_{\\odot}}} $$ Note: We assume these are launched directly from the surface or orbital path with negligible atmospheric drag and no propulsion. 3.3 Numerical Calculations Earth \\(v_{orb,\\oplus} = \\sqrt{\\frac{6.674 \\times 10^{-11} \\cdot 5.972 \\times 10^{24}}{6.371 \\times 10^6}} \\approx 7.91\\,\\text{km/s}\\) \\(v_{esc,\\oplus} = \\sqrt{2} \\cdot v_{orb,\\oplus} \\approx 11.19\\,\\text{km/s}\\) \\(v_{3rd,\\oplus} = \\sqrt{\\frac{2 \\cdot 6.674 \\times 10^{-11} \\cdot 1.989 \\times 10^{30}}{1.496 \\times 10^{11}}} \\approx 42.1\\,\\text{km/s}\\) Mars \\(v_{orb,\\text{Mars}} \\approx \\sqrt{\\frac{6.674 \\times 10^{-11} \\cdot 6.417 \\times 10^{23}}{3.390 \\times 10^6}} \\approx 3.56\\,\\text{km/s}\\) \\(v_{esc,\\text{Mars}} \\approx \\sqrt{2} \\cdot v_{orb,\\text{Mars}} \\approx 5.03\\,\\text{km/s}\\) \\(v_{3rd,\\text{Mars}} \\approx \\sqrt{\\frac{2 \\cdot 6.674 \\times 10^{-11} \\cdot 1.989 \\times 10^{30}}{2.279 \\times 10^{11}}} \\approx 38.5\\,\\text{km/s}\\) Jupiter \\(v_{orb,\\text{Jup}} \\approx \\sqrt{\\frac{6.674 \\times 10^{-11} \\cdot 1.898 \\times 10^{27}}{6.9911 \\times 10^7}} \\approx 42.1\\,\\text{km/s}\\) \\(v_{esc,\\text{Jup}} \\approx \\sqrt{2} \\cdot v_{orb,\\text{Jup}} \\approx 59.5\\,\\text{km/s}\\) \\(v_{3rd,\\text{Jup}} \\approx \\sqrt{\\frac{2 \\cdot 6.674 \\times 10^{-11} \\cdot 1.989 \\times 10^{30}}{7.785 \\times 10^{11}}} \\approx 18.5\\,\\text{km/s}\\) 3.4 Summary Table Planet \\(v_{orb}\\) [km/s] \\(v_{esc}\\) [km/s] \\(v_{3rd}\\) [km/s] Earth 7.91 11.19 42.1 Mars 3.56 5.03 38.5 Jupiter 42.1 59.5 18.5 Remarks Earth has a balanced gravity well and a moderately high third cosmic velocity. Mars , due to its smaller mass and radius, has the lowest escape velocities \u2014 making it a practical target for missions. Jupiter has extreme gravitational requirements for launching from the surface, but its position farther from the Sun reduces the third cosmic velocity needed for solar escape. These values are foundational for mission planning and propulsion calculations in aerospace engineering. Visualization and Verification 4.1 Kepler's Third Law Verification: \\(T^2 \\propto r^3\\) import numpy as np import matplotlib.pyplot as plt # Semi-major axes in AU and periods in years (data from real planets) r = np.array([0.39, 0.72, 1.00, 1.52, 5.20, 9.58]) # Mercury to Saturn T = np.array([0.24, 0.62, 1.00, 1.88, 11.86, 29.46]) plt.figure() plt.plot(r**3, T**2, 'o-', label=\"$T^2$ vs $r^3$\") plt.xlabel(\"$r^3$ (AU$^3$)\") plt.ylabel(\"$T^2$ (years$^2$)\") plt.title(\"Verification of Kepler's Third Law\") plt.grid(True) plt.legend() plt.annotate(\"Linear relationship confirms $T^2 \\\\propto r^3$\", xy=(1,1), xytext=(5, 500), arrowprops=dict(arrowstyle=\"->\")) plt.show() 4.2 Log-Log Plot to Check the Slope (Expected \u2248 1) plt.figure() plt.loglog(r, T, 'o-', label=\"Log-Log Plot\") plt.xlabel(\"log($r$) [AU]\") plt.ylabel(\"log($T$) [years]\") plt.title(\"Log-Log Plot of Kepler's Third Law\") plt.grid(True, which='both') # Fit and show slope slope, intercept = np.polyfit(np.log10(r), np.log10(T), 1) plt.text(0.1, 0.3, f\"Slope \u2248 {slope:.2f}\", transform=plt.gca().transAxes) plt.legend() plt.show() 4.3 Comparison of Cosmic Velocities Across Planets import matplotlib.pyplot as plt planets = ['Earth', 'Mars', 'Jupiter'] v_orb = [7.91, 3.56, 42.1] v_esc = [11.19, 5.03, 59.5] v_3rd = [42.1, 38.5, 18.5] x = np.arange(len(planets)) width = 0.25 plt.figure() plt.bar(x - width, v_orb, width, label='1st Cosmic (Orbital)') plt.bar(x, v_esc, width, label='2nd Cosmic (Escape)') plt.bar(x + width, v_3rd, width, label='3rd Cosmic (Solar Escape)') plt.xticks(x, planets) plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Earth, Mars, and Jupiter') plt.legend() plt.grid(axis='y') plt.show() 4.4 Mass/Radius vs Escape Velocity Relationship mass = np.array([5.972e24, 6.417e23, 1.898e27]) # kg radius = np.array([6.371e6, 3.390e6, 6.9911e7]) # m labels = ['Earth', 'Mars', 'Jupiter'] G = 6.674e-11 v_esc = np.sqrt(2 * G * mass / radius) / 1000 # km/s plt.figure() plt.scatter(mass/radius, v_esc) for i, label in enumerate(labels): plt.annotate(label, (mass[i]/radius[i], v_esc[i])) plt.xlabel('Mass/Radius (kg/m)') plt.ylabel('Escape Velocity (km/s)') plt.title('Escape Velocity vs Mass/Radius') plt.grid(True) plt.show() 4.5 Simulated Escape Trajectory (Ballistic Approx.) (Optional) from scipy.integrate import solve_ivp G = 6.674e-11 M_earth = 5.972e24 R_earth = 6.371e6 def trajectory(t, y): r, v = y a = -G * M_earth / r**2 return [v, a] # Initial condition: just above Earth's surface with v_esc v0 = np.sqrt(2 * G * M_earth / R_earth) sol = solve_ivp(trajectory, [0, 10000], [R_earth, v0], t_eval=np.linspace(0, 10000, 1000)) plt.figure() plt.plot(sol.t, (sol.y[0] - R_earth)/1000) plt.xlabel(\"Time (s)\") plt.ylabel(\"Altitude above surface (km)\") plt.title(\"Escape Trajectory from Earth\") plt.grid(True) plt.show() Applications & Discussion 5.1 Relevance of Cosmic Velocities in Space Missions a. Satellite Launches For a satellite to maintain a stable low Earth orbit (LEO) , it must achieve the first cosmic velocity , i.e., the orbital velocity: \\[ v_{orb} = \\sqrt{\\frac{GM}{r}} \\] For Earth, this corresponds to approximately \\(7.91\\,\\text{km/s}\\) just above the surface. Rockets are designed to deliver payloads into this velocity band with high precision. Failing to reach this speed causes the satellite to re-enter the atmosphere; exceeding it without further control may lead to escape trajectories. Launch profiles often include a vertical ascent phase (to clear the atmosphere), followed by a gravity turn to achieve horizontal velocity for orbit. b. Planetary Missions To send a spacecraft to Mars , Jupiter , or any other planet, it must at minimum achieve the second cosmic velocity : \\[ v_{esc} = \\sqrt{\\frac{2GM}{r}} \\approx 11.19\\,\\text{km/s} \\quad \\text{(for Earth)} \\] However, this speed only places the spacecraft on a heliocentric (Sun-centered) trajectory. To intercept another planet, precise Hohmann transfer orbits are computed, often using gravitational slingshots for energy efficiency. The launch window is crucial, since planets move in elliptical orbits. Delta-v budgets are carefully calculated to ensure the spacecraft escapes Earth's gravity and enters the correct interplanetary trajectory. c. Interstellar Travel To escape the Solar System , a spacecraft must reach or exceed the third cosmic velocity : \\[ v_{3rd} = \\sqrt{\\frac{2GM_{\\odot}}{r_{\\oplus}}} \\approx 42.1\\,\\text{km/s} \\] This is far beyond the capacity of conventional chemical rockets for direct launch. Missions such as Voyager 1 achieved this by combining multiple gravity assists (Jupiter, Saturn) to boost their velocity incrementally. Interstellar travel requires either: - High-efficiency propulsion (e.g., ion drives, solar sails), - Long mission durations (decades or centuries), - Or breakthrough physics (e.g., nuclear or fusion propulsion). 5.2 Engineering and Fuel Implications Achieving each velocity level involves substantial energy expenditure , and the relationship is non-linear due to the rocket equation : \\[ \\Delta v = v_e \\ln\\left( \\frac{m_0}{m_f} \\right) \\] Where: - \\(\\Delta v\\) is the required change in velocity, - \\(v_e\\) is the effective exhaust velocity of the propulsion system, - \\(m_0\\) and \\(m_f\\) are the initial and final mass of the rocket. Implications: Achieving higher \\(\\Delta v\\) requires either: Extremely efficient engines (high \\(v_e\\) ), Large fuel-to-payload ratios (increasing \\(m_0/m_f\\) ), Or staging : discarding parts of the rocket after burnout. For LEO satellites , small rockets or reusable launchers suffice. For planetary missions , multi-stage rockets like the Saturn V or SLS are necessary. For interstellar probes , current propulsion is inadequate without significant advances in fuel efficiency or entirely new energy sources. Summary Understanding and overcoming the thresholds set by the first, second, and third cosmic velocities is at the core of mission planning in astrodynamics. Each level defines a new frontier: \\(v_{orb}\\) enables orbiting , \\(v_{esc}\\) enables exploration , \\(v_{3rd}\\) hints at the possibility of escape from our solar neighborhood. Each requires innovation in both physics and engineering \u2014 combining mathematical precision, materials science, and propulsion technologies to make the cosmos accessible.","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#definitions-concepts","text":"","title":"Definitions &amp; Concepts"},{"location":"1%20Physics/2%20Gravity/Problem_2/#11-escape-velocity","text":"Escape velocity is the minimum speed an object must reach to break free from the gravitational pull of a celestial body, without any further propulsion. The general formula for escape velocity is derived from the conservation of energy: \\[ \\frac{1}{2}mv^2 = \\frac{GMm}{r} \\] Solving for velocity: \\[ v_{esc} = \\sqrt{\\frac{2GM}{r}} \\] Where: - \\(v_{esc}\\) is the escape velocity, - \\(G\\) is the gravitational constant \\((6.674 \\times 10^{-11}\\,\\text{m}^3\\,\\text{kg}^{-1}\\,\\text{s}^{-2})\\) , - \\(M\\) is the mass of the celestial body, - \\(r\\) is the distance from the center of the body to the point of escape (typically the planet\u2019s radius).","title":"1.1 Escape Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#12-first-cosmic-velocity-orbital-velocity","text":"The first cosmic velocity refers to the minimum horizontal speed an object must have to remain in a stable, circular orbit just above the surface of a celestial body, without falling back to the surface. It is derived by equating gravitational force to centripetal force: \\[ \\frac{GMm}{r^2} = \\frac{mv^2}{r} \\] Solving for \\(v\\) : \\[ v_{orb} = \\sqrt{\\frac{GM}{r}} \\] This is also called the orbital velocity , and it is lower than escape velocity: \\[ v_{orb} = \\frac{v_{esc}}{\\sqrt{2}} \\]","title":"1.2 First Cosmic Velocity (Orbital Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#13-second-cosmic-velocity","text":"The second cosmic velocity is simply another term for escape velocity from a planetary body. It is the minimum speed required to completely escape the gravitational influence of the planet and enter into space, assuming no further propulsion. Thus: \\[ v_{2nd} = v_{esc} = \\sqrt{\\frac{2GM}{r}} \\]","title":"1.3 Second Cosmic Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#14-third-cosmic-velocity","text":"The third cosmic velocity is the speed required for a spacecraft to escape not only Earth\u2019s gravity, but also the Sun\u2019s gravity, starting from Earth\u2019s orbit. This is relevant for interstellar missions. This involves both Earth\u2019s orbital velocity around the Sun and the Sun\u2019s gravitational influence. It can be approximated by: \\[ v_{3rd} = \\sqrt{v_{esc,\\odot}^2 + v_{orb,\\oplus}^2} \\] Where: - \\(v_{esc,\\odot}\\) is the escape velocity from the Sun at Earth\u2019s distance, - \\(v_{orb,\\oplus}\\) is Earth\u2019s orbital speed around the Sun ( \\(\\approx 29.78\\,\\text{km/s}\\) ). A simplified expression (ignoring Earth's gravity) for escaping the Solar System from Earth\u2019s orbit: \\[ v_{3rd} \\approx \\sqrt{\\frac{2GM_{\\odot}}{r_{\\oplus}}} \\] Where: - \\(M_{\\odot}\\) is the mass of the Sun, - \\(r_{\\oplus}\\) is the average distance from Earth to the Sun ( \\(\\approx 1.496 \\times 10^{11}\\,\\text{m}\\) ).","title":"1.4 Third Cosmic Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#15-physical-meaning-in-space-exploration","text":"First Cosmic Velocity is the target speed for launching satellites into low Earth orbit. It represents the threshold for achieving continuous free-fall around Earth. Second Cosmic Velocity is critical for missions intending to leave Earth's orbit \u2014 such as lunar missions or probes bound for other planets. Third Cosmic Velocity pertains to missions aiming to exit the Solar System, such as the Voyager and Pioneer spacecraft. Achieving this velocity allows an object to overcome the Sun\u2019s gravitational hold. Understanding these velocities is fundamental for determining fuel requirements, launch windows, and mission design in astrodynamics and interplanetary navigation .","title":"1.5 Physical Meaning in Space Exploration"},{"location":"1%20Physics/2%20Gravity/Problem_2/#mathematical-derivations","text":"","title":"Mathematical Derivations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#21-escape-velocity","text":"To derive the escape velocity, we equate the kinetic energy of an object to the gravitational potential energy required to escape the gravitational field of a body. Kinetic energy of the object: $$ KE = \\frac{1}{2}mv^2 $$ Gravitational potential energy of the object (at distance \\(r\\) from the center of mass \\(M\\) ): $$ U = -\\frac{GMm}{r} $$ For escape, the total mechanical energy must be zero: \\[ \\frac{1}{2}mv^2 - \\frac{GMm}{r} = 0 \\] Solving for \\(v\\) : \\[ v_{esc} = \\sqrt{\\frac{2GM}{r}} \\] This velocity is independent of the mass of the escaping object and depends only on the mass and radius of the celestial body.","title":"2.1 Escape Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#22-first-cosmic-velocity-orbital-velocity","text":"This is the velocity required to keep an object in circular orbit just above the surface of a planet. It is derived by balancing the gravitational force and the required centripetal force: Gravitational force: $$ F_g = \\frac{GMm}{r^2} $$ Centripetal force: $$ F_c = \\frac{mv^2}{r} $$ Setting \\(F_g = F_c\\) : \\[ \\frac{GMm}{r^2} = \\frac{mv^2}{r} \\] Cancelling \\(m\\) and solving for \\(v\\) : \\[ v_{orb} = \\sqrt{\\frac{GM}{r}} \\] This is the first cosmic velocity and is precisely the speed needed for stable circular orbit at altitude zero (neglecting atmosphere).","title":"2.2 First Cosmic Velocity (Orbital Velocity)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#23-third-cosmic-velocity","text":"The third cosmic velocity is the speed required to escape the Sun\u2019s gravitational field from Earth\u2019s orbit. The Sun\u2019s gravitational potential energy at Earth\u2019s orbital distance: \\[ U = -\\frac{GM_{\\odot}m}{r_{\\oplus}} \\] Kinetic energy needed to escape from the Sun\u2019s gravity: \\[ \\frac{1}{2}mv^2 = \\frac{GM_{\\odot}m}{r_{\\oplus}} \\] Solving for \\(v\\) : \\[ v_{3rd} = \\sqrt{\\frac{2GM_{\\odot}}{r_{\\oplus}}} \\] However, since Earth is already moving at orbital velocity \\(v_{\\oplus} \\approx 29.78\\) km/s, the spacecraft only needs additional velocity beyond this: \\[ v_{3rd,\\,launch} = \\sqrt{v_{esc,\\odot}^2 + v_{\\oplus}^2} \\] In practice, this value is adjusted depending on the spacecraft's launch trajectory and timing (e.g., gravity assists).","title":"2.3 Third Cosmic Velocity"},{"location":"1%20Physics/2%20Gravity/Problem_2/#24-influence-of-mass-and-radius","text":"From the escape velocity formula: \\[ v_{esc} = \\sqrt{\\frac{2GM}{r}}, \\quad v_{orb} = \\sqrt{\\frac{GM}{r}} \\] We can draw the following conclusions: Mass ( \\(M\\) ) : As the mass of the celestial body increases, both escape and orbital velocities increase. Radius ( \\(r\\) ) : As the radius increases, the velocities decrease. This is because the gravitational potential becomes weaker farther from the center of mass. Thus, denser and more massive planets like Jupiter have significantly higher escape velocities than Mars .","title":"2.4 Influence of Mass and Radius"},{"location":"1%20Physics/2%20Gravity/Problem_2/#25-assumptions-in-derivations","text":"These derivations rely on several simplifying assumptions: The celestial body is a perfect sphere with mass concentrated at the center (i.e., it behaves as a point mass). No atmospheric drag or air resistance is considered (ideal vacuum conditions). No rotational effects (e.g., Coriolis force or frame-dragging from planet spin). The motion is assumed to be purely radial (for escape) or circular (for orbit). The object has no propulsion after initial velocity is imparted (i.e., ballistic motion). These assumptions allow for clean analytical expressions but differ from real-world engineering, where rocket burns, drag, and non-uniform mass distributions are considered.","title":"2.5 Assumptions in Derivations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#calculations","text":"","title":"Calculations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#31-constants-and-celestial-parameters","text":"We begin by defining the necessary physical constants and planetary data:","title":"3.1 Constants and Celestial Parameters"},{"location":"1%20Physics/2%20Gravity/Problem_2/#universal-constants","text":"Gravitational constant: $$ G = 6.674 \\times 10^{-11}\\,\\text{m}^3\\,\\text{kg}^{-1}\\,\\text{s}^{-2} $$","title":"Universal Constants"},{"location":"1%20Physics/2%20Gravity/Problem_2/#planetary-data","text":"Planet Mass \\((M)\\) [kg] Radius \\((r)\\) [m] Distance from Sun \\((r_{\\odot})\\) [m] Earth \\(5.972 \\times 10^{24}\\) \\(6.371 \\times 10^6\\) \\(1.496 \\times 10^{11}\\) Mars \\(6.417 \\times 10^{23}\\) \\(3.390 \\times 10^6\\) \\(2.279 \\times 10^{11}\\) Jupiter \\(1.898 \\times 10^{27}\\) \\(6.9911 \\times 10^7\\) \\(7.785 \\times 10^{11}\\)","title":"Planetary Data"},{"location":"1%20Physics/2%20Gravity/Problem_2/#solar-mass","text":"Mass of the Sun: $$ M_{\\odot} = 1.989 \\times 10^{30}\\,\\text{kg} $$","title":"Solar Mass"},{"location":"1%20Physics/2%20Gravity/Problem_2/#32-formulas","text":"First Cosmic Velocity (Orbital): $$ v_{orb} = \\sqrt{\\frac{GM}{r}} $$ Second Cosmic Velocity (Escape): $$ v_{esc} = \\sqrt{\\frac{2GM}{r}} $$ Third Cosmic Velocity (Escape from the Sun at planetary orbit): $$ v_{3rd} = \\sqrt{\\frac{2GM_{\\odot}}{r_{\\odot}}} $$ Note: We assume these are launched directly from the surface or orbital path with negligible atmospheric drag and no propulsion.","title":"3.2 Formulas"},{"location":"1%20Physics/2%20Gravity/Problem_2/#33-numerical-calculations","text":"","title":"3.3 Numerical Calculations"},{"location":"1%20Physics/2%20Gravity/Problem_2/#earth","text":"\\(v_{orb,\\oplus} = \\sqrt{\\frac{6.674 \\times 10^{-11} \\cdot 5.972 \\times 10^{24}}{6.371 \\times 10^6}} \\approx 7.91\\,\\text{km/s}\\) \\(v_{esc,\\oplus} = \\sqrt{2} \\cdot v_{orb,\\oplus} \\approx 11.19\\,\\text{km/s}\\) \\(v_{3rd,\\oplus} = \\sqrt{\\frac{2 \\cdot 6.674 \\times 10^{-11} \\cdot 1.989 \\times 10^{30}}{1.496 \\times 10^{11}}} \\approx 42.1\\,\\text{km/s}\\)","title":"Earth"},{"location":"1%20Physics/2%20Gravity/Problem_2/#mars","text":"\\(v_{orb,\\text{Mars}} \\approx \\sqrt{\\frac{6.674 \\times 10^{-11} \\cdot 6.417 \\times 10^{23}}{3.390 \\times 10^6}} \\approx 3.56\\,\\text{km/s}\\) \\(v_{esc,\\text{Mars}} \\approx \\sqrt{2} \\cdot v_{orb,\\text{Mars}} \\approx 5.03\\,\\text{km/s}\\) \\(v_{3rd,\\text{Mars}} \\approx \\sqrt{\\frac{2 \\cdot 6.674 \\times 10^{-11} \\cdot 1.989 \\times 10^{30}}{2.279 \\times 10^{11}}} \\approx 38.5\\,\\text{km/s}\\)","title":"Mars"},{"location":"1%20Physics/2%20Gravity/Problem_2/#jupiter","text":"\\(v_{orb,\\text{Jup}} \\approx \\sqrt{\\frac{6.674 \\times 10^{-11} \\cdot 1.898 \\times 10^{27}}{6.9911 \\times 10^7}} \\approx 42.1\\,\\text{km/s}\\) \\(v_{esc,\\text{Jup}} \\approx \\sqrt{2} \\cdot v_{orb,\\text{Jup}} \\approx 59.5\\,\\text{km/s}\\) \\(v_{3rd,\\text{Jup}} \\approx \\sqrt{\\frac{2 \\cdot 6.674 \\times 10^{-11} \\cdot 1.989 \\times 10^{30}}{7.785 \\times 10^{11}}} \\approx 18.5\\,\\text{km/s}\\)","title":"Jupiter"},{"location":"1%20Physics/2%20Gravity/Problem_2/#34-summary-table","text":"Planet \\(v_{orb}\\) [km/s] \\(v_{esc}\\) [km/s] \\(v_{3rd}\\) [km/s] Earth 7.91 11.19 42.1 Mars 3.56 5.03 38.5 Jupiter 42.1 59.5 18.5","title":"3.4 Summary Table"},{"location":"1%20Physics/2%20Gravity/Problem_2/#remarks","text":"Earth has a balanced gravity well and a moderately high third cosmic velocity. Mars , due to its smaller mass and radius, has the lowest escape velocities \u2014 making it a practical target for missions. Jupiter has extreme gravitational requirements for launching from the surface, but its position farther from the Sun reduces the third cosmic velocity needed for solar escape. These values are foundational for mission planning and propulsion calculations in aerospace engineering.","title":"Remarks"},{"location":"1%20Physics/2%20Gravity/Problem_2/#visualization-and-verification","text":"","title":"Visualization and Verification"},{"location":"1%20Physics/2%20Gravity/Problem_2/#41-keplers-third-law-verification-t2-propto-r3","text":"import numpy as np import matplotlib.pyplot as plt # Semi-major axes in AU and periods in years (data from real planets) r = np.array([0.39, 0.72, 1.00, 1.52, 5.20, 9.58]) # Mercury to Saturn T = np.array([0.24, 0.62, 1.00, 1.88, 11.86, 29.46]) plt.figure() plt.plot(r**3, T**2, 'o-', label=\"$T^2$ vs $r^3$\") plt.xlabel(\"$r^3$ (AU$^3$)\") plt.ylabel(\"$T^2$ (years$^2$)\") plt.title(\"Verification of Kepler's Third Law\") plt.grid(True) plt.legend() plt.annotate(\"Linear relationship confirms $T^2 \\\\propto r^3$\", xy=(1,1), xytext=(5, 500), arrowprops=dict(arrowstyle=\"->\")) plt.show()","title":"4.1 Kepler's Third Law Verification: \\(T^2 \\propto r^3\\)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#42-log-log-plot-to-check-the-slope-expected-1","text":"plt.figure() plt.loglog(r, T, 'o-', label=\"Log-Log Plot\") plt.xlabel(\"log($r$) [AU]\") plt.ylabel(\"log($T$) [years]\") plt.title(\"Log-Log Plot of Kepler's Third Law\") plt.grid(True, which='both') # Fit and show slope slope, intercept = np.polyfit(np.log10(r), np.log10(T), 1) plt.text(0.1, 0.3, f\"Slope \u2248 {slope:.2f}\", transform=plt.gca().transAxes) plt.legend() plt.show()","title":"4.2 Log-Log Plot to Check the Slope (Expected \u2248 1)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#43-comparison-of-cosmic-velocities-across-planets","text":"import matplotlib.pyplot as plt planets = ['Earth', 'Mars', 'Jupiter'] v_orb = [7.91, 3.56, 42.1] v_esc = [11.19, 5.03, 59.5] v_3rd = [42.1, 38.5, 18.5] x = np.arange(len(planets)) width = 0.25 plt.figure() plt.bar(x - width, v_orb, width, label='1st Cosmic (Orbital)') plt.bar(x, v_esc, width, label='2nd Cosmic (Escape)') plt.bar(x + width, v_3rd, width, label='3rd Cosmic (Solar Escape)') plt.xticks(x, planets) plt.ylabel('Velocity (km/s)') plt.title('Cosmic Velocities for Earth, Mars, and Jupiter') plt.legend() plt.grid(axis='y') plt.show()","title":"4.3 Comparison of Cosmic Velocities Across Planets"},{"location":"1%20Physics/2%20Gravity/Problem_2/#44-massradius-vs-escape-velocity-relationship","text":"mass = np.array([5.972e24, 6.417e23, 1.898e27]) # kg radius = np.array([6.371e6, 3.390e6, 6.9911e7]) # m labels = ['Earth', 'Mars', 'Jupiter'] G = 6.674e-11 v_esc = np.sqrt(2 * G * mass / radius) / 1000 # km/s plt.figure() plt.scatter(mass/radius, v_esc) for i, label in enumerate(labels): plt.annotate(label, (mass[i]/radius[i], v_esc[i])) plt.xlabel('Mass/Radius (kg/m)') plt.ylabel('Escape Velocity (km/s)') plt.title('Escape Velocity vs Mass/Radius') plt.grid(True) plt.show()","title":"4.4 Mass/Radius vs Escape Velocity Relationship"},{"location":"1%20Physics/2%20Gravity/Problem_2/#45-simulated-escape-trajectory-ballistic-approx-optional","text":"from scipy.integrate import solve_ivp G = 6.674e-11 M_earth = 5.972e24 R_earth = 6.371e6 def trajectory(t, y): r, v = y a = -G * M_earth / r**2 return [v, a] # Initial condition: just above Earth's surface with v_esc v0 = np.sqrt(2 * G * M_earth / R_earth) sol = solve_ivp(trajectory, [0, 10000], [R_earth, v0], t_eval=np.linspace(0, 10000, 1000)) plt.figure() plt.plot(sol.t, (sol.y[0] - R_earth)/1000) plt.xlabel(\"Time (s)\") plt.ylabel(\"Altitude above surface (km)\") plt.title(\"Escape Trajectory from Earth\") plt.grid(True) plt.show()","title":"4.5 Simulated Escape Trajectory (Ballistic Approx.) (Optional)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#applications-discussion","text":"","title":"Applications &amp; Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_2/#51-relevance-of-cosmic-velocities-in-space-missions","text":"","title":"5.1 Relevance of Cosmic Velocities in Space Missions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#a-satellite-launches","text":"For a satellite to maintain a stable low Earth orbit (LEO) , it must achieve the first cosmic velocity , i.e., the orbital velocity: \\[ v_{orb} = \\sqrt{\\frac{GM}{r}} \\] For Earth, this corresponds to approximately \\(7.91\\,\\text{km/s}\\) just above the surface. Rockets are designed to deliver payloads into this velocity band with high precision. Failing to reach this speed causes the satellite to re-enter the atmosphere; exceeding it without further control may lead to escape trajectories. Launch profiles often include a vertical ascent phase (to clear the atmosphere), followed by a gravity turn to achieve horizontal velocity for orbit.","title":"a. Satellite Launches"},{"location":"1%20Physics/2%20Gravity/Problem_2/#b-planetary-missions","text":"To send a spacecraft to Mars , Jupiter , or any other planet, it must at minimum achieve the second cosmic velocity : \\[ v_{esc} = \\sqrt{\\frac{2GM}{r}} \\approx 11.19\\,\\text{km/s} \\quad \\text{(for Earth)} \\] However, this speed only places the spacecraft on a heliocentric (Sun-centered) trajectory. To intercept another planet, precise Hohmann transfer orbits are computed, often using gravitational slingshots for energy efficiency. The launch window is crucial, since planets move in elliptical orbits. Delta-v budgets are carefully calculated to ensure the spacecraft escapes Earth's gravity and enters the correct interplanetary trajectory.","title":"b. Planetary Missions"},{"location":"1%20Physics/2%20Gravity/Problem_2/#c-interstellar-travel","text":"To escape the Solar System , a spacecraft must reach or exceed the third cosmic velocity : \\[ v_{3rd} = \\sqrt{\\frac{2GM_{\\odot}}{r_{\\oplus}}} \\approx 42.1\\,\\text{km/s} \\] This is far beyond the capacity of conventional chemical rockets for direct launch. Missions such as Voyager 1 achieved this by combining multiple gravity assists (Jupiter, Saturn) to boost their velocity incrementally. Interstellar travel requires either: - High-efficiency propulsion (e.g., ion drives, solar sails), - Long mission durations (decades or centuries), - Or breakthrough physics (e.g., nuclear or fusion propulsion).","title":"c. Interstellar Travel"},{"location":"1%20Physics/2%20Gravity/Problem_2/#52-engineering-and-fuel-implications","text":"Achieving each velocity level involves substantial energy expenditure , and the relationship is non-linear due to the rocket equation : \\[ \\Delta v = v_e \\ln\\left( \\frac{m_0}{m_f} \\right) \\] Where: - \\(\\Delta v\\) is the required change in velocity, - \\(v_e\\) is the effective exhaust velocity of the propulsion system, - \\(m_0\\) and \\(m_f\\) are the initial and final mass of the rocket.","title":"5.2 Engineering and Fuel Implications"},{"location":"1%20Physics/2%20Gravity/Problem_2/#implications","text":"Achieving higher \\(\\Delta v\\) requires either: Extremely efficient engines (high \\(v_e\\) ), Large fuel-to-payload ratios (increasing \\(m_0/m_f\\) ), Or staging : discarding parts of the rocket after burnout. For LEO satellites , small rockets or reusable launchers suffice. For planetary missions , multi-stage rockets like the Saturn V or SLS are necessary. For interstellar probes , current propulsion is inadequate without significant advances in fuel efficiency or entirely new energy sources.","title":"Implications:"},{"location":"1%20Physics/2%20Gravity/Problem_2/#summary","text":"Understanding and overcoming the thresholds set by the first, second, and third cosmic velocities is at the core of mission planning in astrodynamics. Each level defines a new frontier: \\(v_{orb}\\) enables orbiting , \\(v_{esc}\\) enables exploration , \\(v_{3rd}\\) hints at the possibility of escape from our solar neighborhood. Each requires innovation in both physics and engineering \u2014 combining mathematical precision, materials science, and propulsion technologies to make the cosmos accessible.","title":"Summary"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}